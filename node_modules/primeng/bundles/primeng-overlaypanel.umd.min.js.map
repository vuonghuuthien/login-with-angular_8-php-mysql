{"version":3,"sources":["ng://primeng/overlaypanel/overlaypanel.ts"],"names":["OverlayPanel","el","renderer","cd","zone","this","dismissable","autoZIndex","baseZIndex","focusOnShow","showTransitionOptions","hideTransitionOptions","onShow","EventEmitter","onHide","overlayVisible","render","isContainerClicked","prototype","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","markForCheck","onContainerClick","bindDocumentClickListener","documentClickListener","runOutsideAngular","documentEvent","DomHandler","isIOS","listen","event","container","contains","target","run","hide","unbindDocumentClickListener","toggle","hasTargetChanged","destroyCallback","show","currentTarget","appendContainer","appendTo","document","body","appendChild","restoreAppend","nativeElement","align","style","zIndex","String","zindex","absolutePosition","getOffset","top","addClass","Math","floor","left","onAnimationStart","toState","element","emit","bindDocumentResizeListener","focus","onAnimationEnd","onContainerDestroy","focusable","findSingle","setTimeout","onCloseClick","preventDefault","onWindowResize","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","ngOnDestroy","ElementRef","Renderer2","ChangeDetectorRef","NgZone","Component","args","selector","animations","trigger","state","transform","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Input","Output","ContentChildren","PrimeTemplate","OverlayPanelModule","NgModule","imports","CommonModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,OnDestroy,EventEmitter,Renderer2,ElementRef,ChangeDetectorRef,NgZone,\n        ContentChildren,TemplateRef,AfterContentInit,QueryList,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {PrimeTemplate} from 'primeng/api';\nimport {RippleModule} from 'primeng/ripple';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\n\n@Component({\n    selector: 'p-overlayPanel',\n    template: `\n        <div *ngIf=\"render\" [ngClass]=\"'p-overlaypanel p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onContainerClick()\"\n            [@animation]=\"{value: (overlayVisible ? 'open': 'close'), params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" \n                (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\">\n            <div class=\"p-overlaypanel-content\">\n                <ng-content></ng-content>\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            </div>\n            <button *ngIf=\"showCloseIcon\" type=\"button\" class=\"p-overlaypanel-close p-link\" (click)=\"onCloseClick($event)\" (keydown.enter)=\"hide()\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\n                <span class=\"p-overlaypanel-close-icon pi pi-times\"></span>\n            </button>\n        </div>\n    `,\n    animations: [\n        trigger('animation', [\n            state('void', style({\n                transform: 'scaleY(0.8)',\n                opacity: 0\n            })),\n            state('close', style({\n                opacity: 0\n            })),\n            state('open', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => open', animate('{{showTransitionParams}}')),\n            transition('open => close', animate('{{hideTransitionParams}}')),\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./overlaypanel.css']\n})\nexport class OverlayPanel implements AfterContentInit, OnDestroy {\n\n    @Input() dismissable: boolean = true;\n\n    @Input() showCloseIcon: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() ariaCloseLabel: string;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() focusOnShow: boolean = true;\n    \n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    container: HTMLDivElement;\n\n    overlayVisible: boolean = false;\n\n    render: boolean = false;\n\n    isContainerClicked: boolean = true;\n\n    documentClickListener: any;\n            \n    target: any;\n    \n    willHide: boolean;\n        \n    documentResizeListener: any;\n\n    contentTemplate: TemplateRef<any>;\n\n    destroyCallback: Function;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef, private zone: NgZone) {}\n        \n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n\n            this.cd.markForCheck();\n        });\n    }\n\n    onContainerClick() {\n        this.isContainerClicked = true;\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener && this.dismissable) {\n            this.zone.runOutsideAngular(() => {\n                let documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click';\n                this.documentClickListener = this.renderer.listen('document', documentEvent, (event) => {\n                    if (!this.container.contains(event.target) && this.target !== event.target &&Â !this.target.contains(event.target) && !this.isContainerClicked) {\n                        this.zone.run(() => {\n                            this.hide();\n                        });\n                    }\n\n                    this.isContainerClicked = false;\n                    this.cd.markForCheck();\n                });\n            });\n        }\n    }\n    \n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n    \n    toggle(event, target?) {\n        if (this.overlayVisible) {\n            if (this.hasTargetChanged(event, target)) {\n                this.destroyCallback = () => {\n                    this.show(null, (target||event.currentTarget||event.target));\n                };\n            }\n\n            this.hide();\n        }\n        else {\n            this.show(event, target);\n        }\n    }\n\n    show(event, target?) {\n        this.target = target||event.currentTarget||event.target;\n        this.overlayVisible = true;\n        this.render = true;\n        this.cd.markForCheck();\n    }\n\n    hasTargetChanged(event, target) {\n        return this.target != null && this.target !== (target||event.currentTarget||event.target);\n    }\n\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n\n    align() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n        DomHandler.absolutePosition(this.container, this.target);\n        if (DomHandler.getOffset(this.container).top < DomHandler.getOffset(this.target).top) {\n            DomHandler.addClass(this.container, 'p-overlaypanel-flipped');\n        }\n        if (Math.floor(DomHandler.getOffset(this.container).left) < Math.floor(DomHandler.getOffset(this.target).left) &&\n            DomHandler.getOffset(this.container).left > 0) {\n            DomHandler.addClass(this.container, 'p-overlaypanel-shifted');\n        }\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        if (event.toState === 'open') {\n            this.container = event.element;\n            this.onShow.emit(null);\n            this.appendContainer();\n            this.align();\n            this.bindDocumentClickListener();\n            this.bindDocumentResizeListener();\n\n            if (this.focusOnShow) {\n                this.focus();\n            }\n        }\n    }\n\n    onAnimationEnd(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'void':\n                if (this.destroyCallback) {\n                    this.destroyCallback();\n                    this.destroyCallback = null;\n                }\n            break;\n            \n            case 'close':\n                this.onContainerDestroy();\n                this.onHide.emit({});\n                this.render = false;\n            break;     \n        }\n    }\n\n    focus() {\n        let focusable = DomHandler.findSingle(this.container, '[autofocus]');\n        if (focusable) {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => focusable.focus(), 5);\n            });\n        }\n    }\n\n    hide() {\n        this.overlayVisible = false;\n        this.cd.markForCheck();\n    }\n\n    onCloseClick(event) {\n        this.hide();\n        event.preventDefault();\n    }\n\n    onWindowResize(event) {\n        this.hide();\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onContainerDestroy() {\n        this.target = null;\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n    }\n\n    ngOnDestroy() {\n        this.target = null;\n        this.destroyCallback = null;\n        if (this.container) {\n            this.restoreAppend();\n            this.onContainerDestroy();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [OverlayPanel],\n    declarations: [OverlayPanel]\n})\nexport class OverlayPanelModule { }\n"]}