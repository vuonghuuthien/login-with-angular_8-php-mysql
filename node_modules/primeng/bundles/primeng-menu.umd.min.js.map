{"version":3,"sources":["ng://primeng/menu/menu.ts"],"names":["MenuItemContent","menu","this","Inject","args","forwardRef","Menu","Component","selector","template","encapsulation","ViewEncapsulation","None","Input","el","renderer","cd","autoZIndex","baseZIndex","showTransitionOptions","hideTransitionOptions","onShow","EventEmitter","onHide","prototype","toggle","event","visible","hide","show","preventDocumentDefault","target","currentTarget","relativeAlign","markForCheck","onOverlayAnimationStart","toState","popup","container","element","moveOnTop","emit","appendOverlay","alignOverlay","bindDocumentClickListener","bindDocumentResizeListener","onOverlayHide","DomHandler","relativePosition","absolutePosition","appendTo","document","body","appendChild","restoreOverlayAppend","nativeElement","style","zIndex","String","zindex","onWindowResize","itemClick","item","disabled","preventDefault","url","command","originalEvent","_this","documentClickListener","listen","unbindDocumentClickListener","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","ngOnDestroy","hasSubMenu","model","_b","__values","_c","next","done","value","items","ElementRef","Renderer2","ChangeDetectorRef","animations","trigger","transition","opacity","transform","animate","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","Output","MenuModule","NgModule","imports","CommonModule","RouterModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,Output,EventEmitter,Renderer2,ViewChild,Inject,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {MenuItem} from 'primeng/api';\nimport {RouterModule} from '@angular/router';\nimport {RippleModule} from 'primeng/ripple';  \n\n@Component({\n    selector: '[pMenuItemContent]',\n    template: `\n        <a *ngIf=\"!item.routerLink\" [attr.href]=\"item.url||null\" class=\"p-menuitem-link\" [attr.tabindex]=\"item.disabled ? null : '0'\" [attr.data-automationid]=\"item.automationId\" [attr.target]=\"item.target\" [attr.title]=\"item.title\" [attr.id]=\"item.id\"\n            [ngClass]=\"{'p-disabled':item.disabled}\" (click)=\"menu.itemClick($event, item)\" role=\"menuitem\">\n            <span class=\"p-menuitem-icon\" *ngIf=\"item.icon\" [ngClass]=\"item.icon\"></span>\n            <span class=\"p-menuitem-text\">{{item.label}}</span>\n        </a>\n        <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [attr.data-automationid]=\"item.automationId\" [queryParams]=\"item.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\"\n            [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{exact:false}\" class=\"p-menuitem-link\" [attr.target]=\"item.target\" [attr.id]=\"item.id\" [attr.tabindex]=\"item.disabled ? null : '0'\" \n            [attr.title]=\"item.title\" [ngClass]=\"{'p-disabled':item.disabled}\" (click)=\"menu.itemClick($event, item)\" role=\"menuitem\" pRipple\n            [fragment]=\"item.fragment\" [queryParamsHandling]=\"item.queryParamsHandling\" [preserveFragment]=\"item.preserveFragment\" [skipLocationChange]=\"item.skipLocationChange\" [replaceUrl]=\"item.replaceUrl\" [state]=\"item.state\">\n            <span class=\"p-menuitem-icon\" *ngIf=\"item.icon\" [ngClass]=\"item.icon\"></span>\n            <span class=\"p-menuitem-text\">{{item.label}}</span>\n        </a>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class MenuItemContent {\n\n    @Input(\"pMenuItemContent\") item: MenuItem;\n\n    menu: Menu;\n    \n    constructor(@Inject(forwardRef(() => Menu)) menu) {\n        this.menu = menu as Menu;\n    }\n}\n\n@Component({\n    selector: 'p-menu',\n    template: `\n        <div #container [ngClass]=\"{'p-menu p-component': true, 'p-menu-overlay': popup}\"\n            [class]=\"styleClass\" [ngStyle]=\"style\" (click)=\"preventDocumentDefault=true\" *ngIf=\"!popup || visible\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" [@.disabled]=\"popup !== true\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\">\n            <ul class=\"p-menu-list p-reset\">\n                <ng-template ngFor let-submenu [ngForOf]=\"model\" *ngIf=\"hasSubMenu()\">\n                    <li class=\"p-menu-separator\" *ngIf=\"submenu.separator\" [ngClass]=\"{'p-hidden': submenu.visible === false}\"></li>\n                    <li class=\"p-submenu-header\" [attr.data-automationid]=\"submenu.automationId\" *ngIf=\"!submenu.separator\" [ngClass]=\"{'p-hidden': submenu.visible === false}\">{{submenu.label}}</li>\n                    <ng-template ngFor let-item [ngForOf]=\"submenu.items\">\n                        <li class=\"p-menu-separator\" *ngIf=\"item.separator\" [ngClass]=\"{'p-hidden': (item.visible === false ||Â submenu.visible === false)}\"></li>\n                        <li class=\"p-menuitem\" *ngIf=\"!item.separator\" [pMenuItemContent]=\"item\" [ngClass]=\"{'p-hidden': (item.visible === false || submenu.visible === false)}\" [ngStyle]=\"item.style\" [class]=\"item.styleClass\"></li>\n                    </ng-template>\n                </ng-template>\n                <ng-template ngFor let-item [ngForOf]=\"model\" *ngIf=\"!hasSubMenu()\">\n                    <li class=\"p-menu-separator\" *ngIf=\"item.separator\" [ngClass]=\"{'p-hidden': item.visible === false}\"></li>\n                    <li class=\"p-menuitem\" *ngIf=\"!item.separator\" [pMenuItemContent]=\"item\" [ngClass]=\"{'p-hidden': item.visible === false}\" [ngStyle]=\"item.style\" [class]=\"item.styleClass\"></li>\n                </ng-template>\n            </ul>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('{{showTransitionParams}}')\n              ]),\n              transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n              ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./menu.css']\n})\nexport class Menu implements OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() popup: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n    \n    container: HTMLDivElement;\n    \n    documentClickListener: any;\n\n    documentResizeListener: any;\n    \n    preventDocumentDefault: boolean;\n\n    target: any;\n\n    visible: boolean;\n\n    relativeAlign: boolean;\n    \n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef) {}\n\n    toggle(event) {\n        if (this.visible)\n            this.hide();\n        else\n            this.show(event);\n\n        this.preventDocumentDefault = true;\n    }\n\n    show(event) {\n        this.target = event.currentTarget;\n        this.relativeAlign = event.relativeAlign;\n        this.visible = true;\n        this.preventDocumentDefault = true;\n        this.cd.markForCheck();\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                if (this.popup) {\n                    this.container = event.element;\n                    this.moveOnTop();\n                    this.onShow.emit({});\n                    this.appendOverlay();\n                    this.alignOverlay();\n                    this.bindDocumentClickListener();\n                    this.bindDocumentResizeListener();\n                }\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n                this.onHide.emit({});\n            break;\n        }\n    }\n\n    alignOverlay() {\n        if (this.relativeAlign)\n            DomHandler.relativePosition(this.container, this.target);\n        else\n            DomHandler.absolutePosition(this.container, this.target);\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n    \n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n    \n    hide() {\n        this.visible = false;\n        this.relativeAlign = false;\n        this.cd.markForCheck();\n    }\n\n    onWindowResize() {\n        this.hide();\n    }\n    \n    itemClick(event, item: MenuItem)Â {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n        \n        if (!item.url) {\n            event.preventDefault();\n        }\n        \n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n        \n        if (this.popup) {\n            this.hide();\n        }\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', () => {\n                if (!this.preventDocumentDefault) {\n                    this.hide();\n                }\n\n                this.preventDocumentDefault = false;\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.preventDocumentDefault = false;\n        this.target = null;\n    }\n    \n    ngOnDestroy() {\n        if (this.popup) {\n            this.restoreOverlayAppend();\n            this.onOverlayHide();\n        }\n    }\n    \n    hasSubMenu(): boolean {\n        if (this.model) {\n            for (var item of this.model) {\n                if (item.items) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule,RippleModule],\n    exports: [Menu,RouterModule],\n    declarations: [Menu,MenuItemContent]\n})\nexport class MenuModule { }\n"]}