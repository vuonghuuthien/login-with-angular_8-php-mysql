{"version":3,"sources":["ng://primeng/treetable/treetable.ts"],"names":["TreeTableService","this","sortSource","Subject","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","node","onUIUpdate","value","onTotalRecordsChange","Injectable","TreeTable","el","zone","tableService","lazy","lazyLoadOnInit","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","nodes_1","__values","nodes_1_1","done","rowNode","expanded","push","children","data","i","rows","dataKey","Array","isArray","_b","_c","String","ObjectUtils","resolveFieldData","onPageChange","event","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","nodes_2","nodes_2_1","sortMultipleNodes","multisortmeta","multisortField","nodes_3","nodes_3_1","isSorted","sorted","globalFilter","virtualScroll","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","options","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","DomHandler","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","scrollableBody_1","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","tableViewChild","containerWidth","element","removeClass","parent_1","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","isMultipleSelectionMode","__spread","rowIndex","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","data_1","data_1_1","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","index_1","equals","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","__assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","FilterUtils","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","filterLocale","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","ElementRef","NgZone","Component","args","selector","providers","encapsulation","ViewEncapsulation","None","Input","Output","ViewChild","ContentChildren","PrimeTemplate","TTBody","tt","TTScrollableView","subscription","subscribe","runOutsideAngular","alignScrollBar","_scrollHeight","includes","console","log","ngAfterViewChecked","ngAfterViewInit","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenColumns","frozenView","previousElementSibling","frozenSiblingBody","bindEvents","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollHeaderBoxViewChild","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","virtualScrollBody","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollFooterBoxViewChild","scrollTop","scrollToIndex","hasVerticalOverflow","getDataLength","getViewportSize","getOuterHeight","scrollTableViewChild","scrollBarWidth","marginRight","unsubscribe","CdkVirtualScrollViewport","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","Directive","host","[class.p-sortable-column]","[class.p-highlight]","[attr.tabindex]","[attr.role]","HostListener","TTSortIcon","cd","markForCheck","ChangeDetectorRef","changeDetection","ChangeDetectionStrategy","OnPush","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","[class.p-highlight-contextmenu]","TTCheckbox","disabled","onFocus","boxViewChild","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","data_2","data_2_1","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","row","TreeTableToggler","TreeTableModule","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","RippleModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeNode } from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { SortMeta } from 'primeng/api';\nimport { BlockableUI } from 'primeng/api';\nimport { FilterMetadata } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport { FilterUtils } from 'primeng/utils';\nimport { RippleModule } from 'primeng/ripple';\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\n\n@Injectable()\nexport class TreeTableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private uiUpdateSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(node: any) {\n        this.contextMenuSource.next(node);\n    }\n\n    onUIUpdate(value: any) {\n        this.uiUpdateSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n}\n\n@Component({\n    selector: 'p-treeTable',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n                [ngClass]=\"{'p-treetable p-component': true, \n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'p-treetable-auto-layout': autoLayout, \n                'p-treetable-resizable': resizableColumns, \n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'), \n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TreeTableService],\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./treetable.css']\n})\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\n\n    @Input() columns: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Input() autoLayout: boolean;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() paginator: boolean;\n\n    @Input() rows: number;\n\n    @Input() first: number = 0;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n\n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() customSort: boolean;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() rowHover: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Input() frozenWidth: string;\n\n    @Input() frozenColumns: any[];\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterMode: string = 'lenient';\n\n    @Input() filterLocale: string;\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ViewChild('scrollableView') scrollableViewChild;\n\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: TreeNode[] = [];\n\n    serializedValue: any[];\n\n    _totalRecords: number = 0;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    filteredNodes: any[];\n\n    filterTimeout: any;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    dropPosition: number;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    selectionKeys: any = {};\n\n    rowTouched: boolean;\n\n    editingCell: Element;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    initialized: boolean;\n\n    toggleRowIndex: number;\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService) {}\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    updateSerializedValue() {\n        this.serializedValue = [];\n\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\n    }\n\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for(let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n\n            for(let i = first; i < (first + this.rows); i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n\n        this.tableService.onUIUpdate(this.value);\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\n                \n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n\n            this.sortMultiple();\n        }\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.sortOrder * result);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n               this.sortMultipleNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.updateSerializedValue();\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n\n    multisortField(node1, node2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta)Â {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field)Â {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({top: 0});\n    }\n\n    public scrollToVirtualIndex(index: number) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n\n    public scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n\n    isEmpty() {\n        let data = this.filteredNodes||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                            table.style.width = width + 'px';\n                        }\n                    };\n            \n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    handleRowClick(event) {\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n            if (metaSelection) {\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection||[];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n            }\n        }\n    }\n\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection||[];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({originalEvent: event, node: node});\n        }\n\n        this.tableService.onSelectionChange();\n    }\n\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n    }\n\n    propagateSelectionUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedChildCount: number = 0;\n            let childPartialSelected: boolean = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n\n            if (select && selectedChildCount == node.children.length) {\n                this._selection =  [...this.selection||[], node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection =  this.selection.filter((val,i) => i!=index);\n\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n\n    propagateSelectionDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n        if (select && index == -1) {\n            this._selection =  [...this.selection||[],node]\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection =  this.selection.filter((val,i) => i!=index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n\n        node.partialSelected = false;\n\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(node: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n\n                for (let node of this.value) {\n                    let copyNode = {...node};\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = FilterUtils[filterMatchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                    localMatch = false;\n                            }\n\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = {...copyNode};\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = FilterUtils[this.filters['global'].matchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                    globalMatch = true;\n                                    copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\n                }\n\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.first = 0;\n\n        const filteredValue = this.filteredNodes || this.value;\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n\n            if (matched) {\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n            matched = true;\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredNodes = null;\n        this.filters = {};\n\n        this.first = 0;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    updateEditingCell(cell) {\n        this.editingCell = cell;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n\n}\n\n@Component({\n    selector: '[pTreeTableBody]',\n    template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns}\"></ng-container>\n        </ng-container>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TTBody {\n\n    @Input(\"pTreeTableBody\") columns: any[];\n\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\n\n    @Input() frozen: boolean;\n\n    constructor(public tt: TreeTable) {}\n}\n\n@Component({\n    selector: '[ttScrollableView]',\n    template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\" \n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TTScrollableView implements AfterViewInit, OnDestroy, AfterViewChecked {\n\n    @Input(\"ttScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('loadingTable') scrollLoadingTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\n\n    headerScrollListener;\n\n    bodyScrollListener;\n\n    footerScrollListener;\n\n    frozenSiblingBody: Element;\n\n    subscription: Subscription;\n\n    totalRecordsSubscription: Subscription;\n\n    initialized: boolean;\n\n    _scrollHeight: string;\n\n    preventBodyScrollPropagation: boolean;\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\n        }\n    }\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n                    this.initialized = true;\n                }, 50);\n            });\n        });\n\n        this.initialized = false;\n     }\n\n    ngAfterViewChecked() {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.tt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n\n        this.bindEvents();\n        this.alignScrollBar();\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n\n                if (this.tt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n\n    scrollToVirtualIndex(index: number): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n\n    scrollTo(options): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n\n    hasVerticalOverflow() {\n        if (this.tt.virtualScroll)\n            return (this.virtualScrollBody.getDataLength() * this.tt.virtualRowHeight) > this.virtualScrollBody.getViewportSize();\n        else\n            return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n\n    alignScrollBar() {\n        if (!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n\n        this.initialized = false;\n    }\n}\n\n@Directive({\n    selector: '[ttSortableColumn]',\n    host: {\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"'\n    }\n})\nexport class TTSortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"ttSortableColumn\") field: string;\n\n    @Input() ttSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-treeTableSortIcon',\n    template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TTSortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n\n    @Input() ariaLabelDesc: string;\n\n    @Input() ariaLabelAsc: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public tt: TreeTable, public cd: ChangeDetectorRef) {\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n\n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[ttResizableColumn]'\n})\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'p-column-resizer';\n            this.el.nativeElement.appendChild(this.resizer);\n\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: Event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n\n    onDocumentMouseMove(event: Event) {\n        this.tt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: Event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n\n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[ttReorderableColumn]'\n})\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRow]',\n    host: {\n        '[class.p-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRow\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onEnterKey(event: KeyboardEvent) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRowDblClick]',\n    host: {\n        '[class.p-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttContextMenuRow]',\n    host: {\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class TTContextMenuRow {\n\n    @Input(\"ttContextMenuRow\") rowNode: any;\n\n    @Input() ttContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n\n            this.el.nativeElement.focus();\n\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TTCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input(\"value\") rowNode: any;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableHeaderCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TTHeaderCheckbox  {\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    disabled: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private cd: ChangeDetectorRef) {\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        this.cd.markForCheck();\n        let checked: boolean;\n        const data = this.tt.filteredNodes||this.tt.value;\n\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else  {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n\n        return checked;\n    }\n\n}\n\n@Directive({\n    selector: '[ttEditableColumn]'\n})\nexport class TTEditableColumn implements AfterViewInit {\n\n    @Input(\"ttEditableColumn\") data: any;\n\n    @Input(\"ttEditableColumnField\") field: any;\n\n    @Input() ttEditableColumnDisabled: boolean;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCellEditor',\n    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TreeTableCellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\n\n@Directive({\n    selector: '[ttRow]',\n    host: {\n        '[attr.tabindex]': '\"0\"'\n    }\n})\nexport class TTRow {\n\n    @Input('ttRow') rowNode: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n        }\n    }\n\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\n\n@Component({\n    selector: 'p-treeTableToggler',\n    template: `\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TreeTableToggler {\n\n    @Input() rowNode: any;\n\n    constructor(public tt: TreeTable) {}\n\n    onClick(event: Event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n\n        event.preventDefault();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule,ScrollingModule,RippleModule],\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor,ScrollingModule],\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor]\n})\nexport class TreeTableModule { }\n"]}