{"version":3,"sources":["ng://primeng/sidebar/sidebar.ts"],"names":["Sidebar","el","renderer","this","position","blockScroll","autoZIndex","baseZIndex","modal","dismissible","showCloseIcon","closeOnEscape","onShow","EventEmitter","onHide","visibleChange","prototype","ngAfterViewInit","initialized","appendTo","document","body","appendChild","containerViewChild","nativeElement","DomHandler","visible","show","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","Object","defineProperty","_visible","val","preventVisibleChangePropagation","hide","ngAfterViewChecked","executePostDisplayActions","emit","style","zIndex","String","zindex","enableModality","disableModality","close","event","preventDefault","mask","createElement","parseInt","addMultipleClasses","maskClickListener","listen","addClass","unbindMaskClickListener","removeChild","removeClass","onAnimationStart","toState","bindDocumentEscapeListener","unbindGlobalListeners","documentEscapeListener","which","unbindDocumentEscapeListener","ngOnDestroy","ElementRef","Renderer2","Component","args","selector","animations","trigger","state","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Input","ViewChild","ContentChildren","PrimeTemplate","Output","SidebarModule","NgModule","imports","CommonModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,Output,EventEmitter,ViewChild,ElementRef,Renderer2,ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, QueryList, AfterContentInit, TemplateRef} from '@angular/core';\nimport {trigger, state, style, transition, animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {RippleModule} from 'primeng/ripple';\nimport {DomHandler} from 'primeng/dom';\nimport {PrimeTemplate} from 'primeng/api';\n\n@Component({\n    selector: 'p-sidebar',\n    template: `\n        <div #container [ngClass]=\"{'p-sidebar':true, 'p-sidebar-active': visible, \n            'p-sidebar-left': (position === 'left'), 'p-sidebar-right': (position === 'right'),\n            'p-sidebar-top': (position === 'top'), 'p-sidebar-bottom': (position === 'bottom'), \n            'p-sidebar-full': fullScreen}\"\n            [@panelState]=\"visible ? 'visible' : 'hidden'\" (@panelState.start)=\"onAnimationStart($event)\" [ngStyle]=\"style\" [class]=\"styleClass\"  role=\"complementary\" [attr.aria-modal]=\"modal\">\n            <div class=\"p-sidebar-content\">\n                <button type=\"button\" class=\"p-sidebar-close p-link\" *ngIf=\"showCloseIcon\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\n                    <span class=\"p-sidebar-close-icon pi pi-times\"></span>\n                </button>\n                <ng-content></ng-content>\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('panelState', [\n            state('hidden', style({\n                opacity: 0\n            })),\n            state('visible', style({\n                opacity: 1\n            })),\n            transition('visible => hidden', animate('300ms ease-in')),\n            transition('hidden => visible', animate('300ms ease-out'))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./sidebar.css']\n})\nexport class Sidebar implements AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy {\n\n    @Input() position: string = 'left';\n\n    @Input() fullScreen: boolean;\n\n    @Input() appendTo: string;\n\n    @Input() blockScroll: boolean = false;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() ariaCloseLabel: string;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() modal: boolean = true;\n\n    @Input() dismissible: boolean = true;\n\n    @Input() showCloseIcon: boolean = true;\n\n    @Input() closeOnEscape: boolean = true;\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n\n    @Output() visibleChange:EventEmitter<any> = new EventEmitter();\n\n    initialized: boolean;\n\n    _visible: boolean;\n\n    preventVisibleChangePropagation: boolean;\n\n    mask: HTMLDivElement;\n\n    maskClickListener: Function;\n\n    documentEscapeListener: Function;\n\n    executePostDisplayActions: boolean;\n\n    contentTemplate: TemplateRef<any>;\n\n    constructor(public el: ElementRef, public renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        this.initialized = true;\n\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.containerViewChild.nativeElement);\n            else\n                DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\n        }\n\n        if (this.visible) {\n            this.show();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    @Input() get visible(): boolean {\n        return this._visible;\n    }\n\n    set visible(val:boolean) {\n        this._visible = val;\n\n        if (this.initialized && this.containerViewChild && this.containerViewChild.nativeElement) {\n            if (this._visible)\n                this.show();\n            else {\n                if (this.preventVisibleChangePropagation)\n                    this.preventVisibleChangePropagation = false;\n                else\n                    this.hide();\n            }\n        }\n    }\n\n    ngAfterViewChecked() {\n        if (this.executePostDisplayActions) {\n            this.onShow.emit({});\n            this.executePostDisplayActions = false;\n        }\n    }\n\n    show() {\n        this.executePostDisplayActions = true;\n        if (this.autoZIndex) {\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n\n        if (this.modal) {\n            this.enableModality();\n        }\n    }\n\n    hide() {\n        this.onHide.emit({});\n\n        if (this.modal) {\n            this.disableModality();\n        }\n    }\n\n    close(event: Event) {\n        this.preventVisibleChangePropagation = true;\n        this.hide();\n        this.visibleChange.emit(false);\n        event.preventDefault();\n    }\n\n    enableModality() {\n        if (!this.mask) {\n            this.mask = document.createElement('div');\n            this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);\n            DomHandler.addMultipleClasses(this.mask, 'p-component-overlay p-sidebar-mask');\n            \n            if (this.dismissible){\n                this.maskClickListener = this.renderer.listen(this.mask, 'click', (event: any) => {\n                    if (this.dismissible) {\n                        this.close(event);\n                    }\n                });\n            }\n\n            document.body.appendChild(this.mask);\n            if (this.blockScroll) {\n                DomHandler.addClass(document.body, 'p-overflow-hidden');\n            }\n        }\n    }\n\n    disableModality() {\n        if (this.mask) {\n            this.unbindMaskClickListener();\n            document.body.removeChild(this.mask);\n            if (this.blockScroll) {\n                DomHandler.removeClass(document.body, 'p-overflow-hidden');\n            }\n            this.mask = null;\n        }\n    }\n\n    onAnimationStart(event){\n        switch(event.toState) {\n            case 'visible':\n                if (this.closeOnEscape) {\n                    this.bindDocumentEscapeListener();\n                }\n            break;\n            \n            case 'hidden':\n                this.unbindGlobalListeners();\n            break;\n        }\n    }\n\n    bindDocumentEscapeListener() {\n        this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\n            if (event.which == 27) {\n                if (parseInt(this.containerViewChild.nativeElement.style.zIndex) === (DomHandler.zindex + this.baseZIndex)) {\n                    this.close(event);\n                }\n            }\n        });\n    }\n\n    unbindDocumentEscapeListener() {\n        if (this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n\n    unbindMaskClickListener() {\n        if (this.maskClickListener) {\n            this.maskClickListener();\n            this.maskClickListener = null;\n        }\n    }\n\n    unbindGlobalListeners() {\n        this.unbindMaskClickListener();\n        this.unbindDocumentEscapeListener();\n    }\n\n    ngOnDestroy() {\n        this.initialized = false;\n\n        if (this.visible) {\n            this.hide();\n        }\n\n        if (this.appendTo) {\n            this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\n        }\n\n\t\tthis.unbindGlobalListeners();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [Sidebar],\n    declarations: [Sidebar]\n})\nexport class SidebarModule { }\n"]}