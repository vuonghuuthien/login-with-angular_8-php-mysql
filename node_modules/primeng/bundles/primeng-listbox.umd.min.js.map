{"version":3,"sources":["ng://primeng/listbox/listbox.ts"],"names":["LISTBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Listbox","multi","el","cd","this","checkbox","filter","filterMode","metaKeySelection","showToggleAll","onChange","EventEmitter","onClick","onDblClick","onModelChange","onModelTouched","disabledSelectedOptions","Object","defineProperty","prototype","_options","val","opts","optionLabel","ObjectUtils","generateSelectItems","_filterValue","ngAfterContentInit","_this","templates","forEach","item","getType","itemTemplate","template","headerTemplate","footerTemplate","writeValue","value","setDisabledSelectedOptions","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","onOptionClick","event","option","readonly","multiple","onOptionClickCheckbox","onOptionClickMultiple","onOptionClickSingle","emit","originalEvent","optionTouched","onOptionTouchEnd","onOptionDoubleClick","selected","isSelected","valueChanged","metaKey","ctrlKey","removeOption","__spread","equals","dataKey","_b","__values","_c","next","done","filterValue","allFilteredSelected","optionCount","getEnabledOptionCount","disabledSelectedOptionCount","length","options","count","allSelected","getFilteredOptions","opt","isItemVisible","onFilter","target","toggleAll","allChecked","i","push","preventDefault","FilterUtils","label","filterLocale","onOptionKeyDown","currentTarget","which","nextItem","findNextItem","focus","prevItem","findPrevItem","nextElementSibling","DomHandler","hasClass","isHidden","previousElementSibling","filteredOptions","onHeaderCheckboxFocus","headerCheckboxFocus","onHeaderCheckboxBlur","ElementRef","ChangeDetectorRef","Component","args","selector","providers","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Input","Output","ViewChild","ContentChild","Header","Footer","ContentChildren","PrimeTemplate","ListboxModule","NgModule","imports","CommonModule","SharedModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, Input, Output, EventEmitter, AfterContentInit, ContentChildren, ContentChild, QueryList, TemplateRef,forwardRef, ChangeDetectorRef, ViewChild, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SelectItem } from 'primeng/api';\nimport { SharedModule, PrimeTemplate, Footer, Header } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils } from 'primeng/utils';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { FilterUtils } from 'primeng/utils';\nimport { RippleModule } from 'primeng/ripple';  \n\nexport const LISTBOX_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => Listbox),\n    multi: true\n};\n\n@Component({\n    selector: 'p-listbox',\n    template: `\n    <div [ngClass]=\"'p-listbox p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n      <div class=\"p-listbox-header\" *ngIf=\"headerFacet || headerTemplate\">\n        <ng-content select=\"p-header\"></ng-content>\n        <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n      </div>\n      <div class=\"p-listbox-header\" *ngIf=\"(checkbox && multiple && showToggleAll) || filter\">\n        <div class=\"p-checkbox p-component\" *ngIf=\"checkbox && multiple && showToggleAll\">\n          <div class=\"p-hidden-accessible\">\n            <input type=\"checkbox\" readonly=\"readonly\" [checked]=\"allChecked\" (focus)=\"onHeaderCheckboxFocus()\" (blur)=\"onHeaderCheckboxBlur()\" (keydown.space)=\"toggleAll($event)\">\n          </div>\n          <div #headerchkbox class=\"p-checkbox-box\" [ngClass]=\"{'p-highlight': allChecked, 'p-focus': headerCheckboxFocus}\" (click)=\"toggleAll($event)\">\n            <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':allChecked}\"></span>\n          </div>\n        </div>\n        <div class=\"p-listbox-filter-container\" *ngIf=\"filter\">\n          <input type=\"text\" [value]=\"filterValue||''\" (input)=\"onFilter($event)\" class=\"p-listbox-filter p-inputtext p-component\" [disabled]=\"disabled\" [attr.placeholder]=\"filterPlaceHolder\" [attr.aria-label]=\"ariaFilterLabel\">\n          <span class=\"p-listbox-filter-icon pi pi-search\"></span>\n        </div>\n      </div>\n      <div [ngClass]=\"'p-listbox-list-wrapper'\" [ngStyle]=\"listStyle\" [class]=\"listStyleClass\">\n        <ul class=\"p-listbox-list\" role=\"listbox\" aria-multiselectable=\"multiple\">\n          <li *ngFor=\"let option of options; let i = index;\" [style.display]=\"isItemVisible(option) ? 'flex' : 'none'\" [attr.tabindex]=\"option.disabled ? null : '0'\" pRipple\n              [ngClass]=\"{'p-listbox-item':true,'p-highlight':isSelected(option), 'p-disabled': option.disabled}\" role=\"option\" [attr.aria-label]=\"option.label\"\n              [attr.aria-selected]=\"isSelected(option)\" (click)=\"onOptionClick($event,option)\" (dblclick)=\"onOptionDoubleClick($event,option)\" (touchend)=\"onOptionTouchEnd($event,option)\" (keydown)=\"onOptionKeyDown($event,option)\">\n            <div class=\"p-checkbox p-component\" *ngIf=\"checkbox && multiple\">\n              <div class=\"p-checkbox-box\" [ngClass]=\"{'p-highlight':isSelected(option)}\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':isSelected(option)}\"></span>\n              </div>\n            </div>\n            <span *ngIf=\"!itemTemplate\">{{option.label}}</span>\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: i}\"></ng-container>\n          </li>\n        </ul>\n      </div>\n      <div class=\"p-listbox-footer\" *ngIf=\"footerFacet || footerTemplate\">\n        <ng-content select=\"p-footer\"></ng-content>\n        <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n      </div>\n    </div>\n  `,\n    providers: [LISTBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./listbox.css']\n})\nexport class Listbox implements AfterContentInit, ControlValueAccessor {\n\n    @Input() multiple: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() listStyle: any;\n\n    @Input() listStyleClass: string;\n\n    @Input() readonly: boolean;\n\n    @Input() disabled: boolean;\n\n    @Input() checkbox: boolean = false;\n\n    @Input() filter: boolean = false;\n\n    @Input() filterMode: string = 'contains';\n\n    @Input() filterLocale: string;\n\n    @Input() metaKeySelection: boolean = true;\n\n    @Input() dataKey: string;\n\n    @Input() showToggleAll: boolean = true;\n\n    @Input() optionLabel: string;\n\n    @Input() ariaFilterLabel: string;\n\n    @Input() filterPlaceHolder: string;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onDblClick: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('headerchkbox') headerCheckboxViewChild: ElementRef;\n\n    @ContentChild(Header) headerFacet;\n\n    @ContentChild(Footer) footerFacet;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    public itemTemplate: TemplateRef<any>;\n\n    public headerTemplate: TemplateRef<any>;\n\n    public footerTemplate: TemplateRef<any>;\n\n    public _filterValue: string;\n\n    public filtered: boolean;\n\n    public value: any;\n\n    public onModelChange: Function = () => { };\n\n    public onModelTouched: Function = () => { };\n\n    public optionTouched: boolean;\n\n    public focus: boolean;\n\n    public _options: any[];\n\n    public headerCheckboxFocus: boolean;\n\n    public disabledSelectedOptions: SelectItem[] = [];\n\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) { }\n\n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n        this._options = opts;\n    }\n\n    @Input() get filterValue(): string {\n        return this._filterValue;\n    }\n\n    set filterValue(val: string) {\n        this._filterValue = val;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n        this.setDisabledSelectedOptions();\n        this.cd.markForCheck();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n\n    onOptionClick(event, option) {\n        if (this.disabled || option.disabled || this.readonly) {\n            return;\n        }\n\n        if (this.multiple) {\n            if (this.checkbox)\n                this.onOptionClickCheckbox(event, option);\n            else\n                this.onOptionClickMultiple(event, option);\n        }\n        else {\n            this.onOptionClickSingle(event, option);\n        }\n        this.onClick.emit({\n            originalEvent: event,\n            option: option,\n            value: this.value\n        });\n        this.optionTouched = false;\n    }\n\n    onOptionTouchEnd(event, option) {\n        if (this.disabled || option.disabled || this.readonly) {\n            return;\n        }\n\n        this.optionTouched = true;\n    }\n\n    onOptionDoubleClick(event: Event, option: SelectItem): any {\n        if (this.disabled || option.disabled || this.readonly) {\n            return;\n        }\n\n        this.onDblClick.emit({\n            originalEvent: event,\n            option: option,\n            value: this.value\n        })\n    }\n\n    onOptionClickSingle(event, option) {\n        let selected = this.isSelected(option);\n        let valueChanged = false;\n        let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n\n        if (metaSelection) {\n            let metaKey = (event.metaKey || event.ctrlKey);\n\n            if (selected) {\n                if (metaKey) {\n                    this.value = null;\n                    valueChanged = true;\n                }\n            }\n            else {\n                this.value = option.value;\n                valueChanged = true;\n            }\n        }\n        else {\n            this.value = selected ? null : option.value;\n            valueChanged = true;\n        }\n\n        if (valueChanged) {\n            this.onModelChange(this.value);\n            this.onChange.emit({\n                originalEvent: event,\n                value: this.value\n            });\n        }\n    }\n\n    onOptionClickMultiple(event, option) {\n        let selected = this.isSelected(option);\n        let valueChanged = false;\n        let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n\n        if (metaSelection) {\n            let metaKey = (event.metaKey || event.ctrlKey);\n\n            if (selected) {\n                if (metaKey) {\n                    this.removeOption(option);\n                }\n                else {\n                    this.value = [option.value];\n                }\n                valueChanged = true;\n            }\n            else {\n                this.value = (metaKey) ? this.value || [] : [];\n                this.value = [...this.value, option.value];\n                valueChanged = true;\n            }\n        }\n        else {\n            if (selected) {\n                this.removeOption(option);\n            }\n            else {\n                this.value = [...this.value || [], option.value];\n            }\n\n            valueChanged = true;\n        }\n\n        if (valueChanged) {\n            this.onModelChange(this.value);\n            this.onChange.emit({\n                originalEvent: event,\n                value: this.value\n            });\n        }\n    }\n\n    onOptionClickCheckbox(event, option) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        let selected = this.isSelected(option);\n\n        if (selected) {\n            this.removeOption(option);\n        }\n        else {\n            this.value = this.value ? this.value : [];\n            this.value = [...this.value, option.value];\n        }\n\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n    }\n\n    removeOption(option: any): void {\n        this.value = this.value.filter(val => !ObjectUtils.equals(val, option.value, this.dataKey));\n    }\n\n    isSelected(option: SelectItem) {\n        let selected = false;\n\n        if (this.multiple) {\n            if (this.value) {\n                for (let val of this.value) {\n                    if (ObjectUtils.equals(val, option.value, this.dataKey)) {\n                        selected = true;\n                        break;\n                    }\n                }\n            }\n        }\n        else {\n            selected = ObjectUtils.equals(this.value, option.value, this.dataKey);\n        }\n\n        return selected;\n    }\n\n    get allChecked(): boolean {\n        if (this.filterValue) {\n            return this.allFilteredSelected();\n        }\n        else {\n            let optionCount = this.getEnabledOptionCount();\n            let disabledSelectedOptionCount = this.disabledSelectedOptions.length;\n\n            return this.value && this.options && (this.value.length > 0 && this.value.length == optionCount + disabledSelectedOptionCount);\n        }\n    }\n\n    getEnabledOptionCount(): number {\n        if (this.options) {\n            let count = 0;\n            for (let opt of this.options) {\n                if (!opt.disabled) {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    allFilteredSelected(): boolean {\n        let allSelected: boolean;\n        let options = this.filterValue ? this.getFilteredOptions() : this.options;\n\n        if (this.value && options && options.length) Â {\n            allSelected = true;\n            for (let opt of this.options) {\n                if (this.isItemVisible(opt)) {\n                    if (!this.isSelected(opt)) {\n                        allSelected = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return allSelected;\n    }\n\n    onFilter(event) {\n        this._filterValue = event.target.value;\n    }\n\n    toggleAll(event) {\n        if (this.disabled || this.readonly || !this.options || this.options.length === 0) {\n            return;\n        }\n\n        if (this.allChecked) {\n            if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n                let value = [];\n                value = [...this.disabledSelectedOptions];\n                this.value = value;\n            }\n            else {\n                this.value = [];\n            }\n        }\n        else {\n            if (this.options) {\n                this.value = [];\n                if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n                    this.value = [...this.disabledSelectedOptions];\n                }\n\n                for (let i = 0; i < this.options.length; i++) {\n                    let opt = this.options[i];\n                    if (this.isItemVisible(opt) && !opt.disabled) {\n                        this.value.push(opt.value);\n                    }\n                }\n            }\n        }\n\n        this.onModelChange(this.value);\n        this.onChange.emit({ originalEvent: event, value: this.value });\n        event.preventDefault();\n    }\n\n    isItemVisible(option: SelectItem): boolean {\n        if (this.filterValue) {\n            let visible;\n\n            if (this.filterMode) {\n                visible = FilterUtils[this.filterMode](option.label, this.filterValue, this.filterLocale);\n            }\n            else {\n                visible = true;\n            }\n\n            return visible;\n        }\n        else {\n            return true;\n        }\n    }\n\n    onOptionKeyDown(event:KeyboardEvent, option) {\n        if (this.readonly) {\n            return;\n        }\n\n        let item = <HTMLLIElement> event.currentTarget;\n\n        switch(event.which) {\n            //down\n            case 40:\n                var nextItem = this.findNextItem(item);\n                if (nextItem) {\n                    nextItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //up\n            case 38:\n                var prevItem = this.findPrevItem(item);\n                if (prevItem) {\n                    prevItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //enter\n            case 13:\n                this.onOptionClick(event, option);\n                event.preventDefault();\n            break;\n        }\n    }\n\n    findNextItem(item) {\n        let nextItem = item.nextElementSibling;\n\n        if (nextItem)\n            return DomHandler.hasClass(nextItem, 'p-disabled') || DomHandler.isHidden(nextItem) ? this.findNextItem(nextItem) : nextItem;\n        else\n            return null;\n    }\n\n    findPrevItem(item) {\n        let prevItem = item.previousElementSibling;\n\n        if (prevItem)\n            return DomHandler.hasClass(prevItem, 'p-disabled') || DomHandler.isHidden(prevItem) ? this.findPrevItem(prevItem) : prevItem;\n        else\n            return null;\n    }\n\n    getFilteredOptions() {\n        let filteredOptions = [];\n        if (this.filterValue) {\n            for (let i = 0; i < this.options.length; i++) {\n                let opt = this.options[i];\n                if (this.isItemVisible(opt) && !opt.disabled) {\n                    filteredOptions.push(opt);\n                }\n            }\n            return filteredOptions;\n        }\n        else {\n            return this.options;\n        }\n    }\n\n    onHeaderCheckboxFocus() {\n        this.headerCheckboxFocus = true;\n    }\n\n    onHeaderCheckboxBlur() {\n        this.headerCheckboxFocus = false;\n    }\n\n    setDisabledSelectedOptions(){\n        if (this.options) {\n            this.disabledSelectedOptions = [];\n            if (this.value) {\n                for (let opt of this.options) {\n                    if (opt.disabled && this.isSelected(opt)) {\n                        this.disabledSelectedOptions.push(opt.value);\n                    }\n                }\n            }\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule, SharedModule, RippleModule],\n    exports: [Listbox, SharedModule],\n    declarations: [Listbox]\n})\nexport class ListboxModule { }\n\n"]}