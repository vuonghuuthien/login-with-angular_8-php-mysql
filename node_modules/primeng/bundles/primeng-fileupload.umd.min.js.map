{"version":3,"sources":["ng://primeng/fileupload/fileupload.ts"],"names":["FileUpload","el","sanitizer","zone","http","cd","this","method","invalidFileSizeMessageSummary","invalidFileSizeMessageDetail","invalidFileTypeMessageSummary","invalidFileTypeMessageDetail","invalidFileLimitMessageDetail","invalidFileLimitMessageSummary","previewWidth","chooseLabel","uploadLabel","cancelLabel","chooseIcon","uploadIcon","cancelIcon","showUploadButton","showCancelButton","mode","onBeforeUpload","EventEmitter","onSend","onUpload","onError","onClear","onRemove","onSelect","onProgress","uploadHandler","_files","progress","uploadedFileCount","Object","defineProperty","prototype","files","i","length","file","validate","isImage","objectURL","bypassSecurityTrustUrl","window","URL","createObjectURL","push","ngAfterContentInit","_this","templates","forEach","item","getType","fileTemplate","template","contentTemplate","toolbarTemplate","ngAfterViewInit","runOutsideAngular","content","nativeElement","addEventListener","onDragOver","bind","choose","advancedFileInput","click","onFileSelect","event","type","isIE11","duplicateIEEvent","msgs","multiple","dataTransfer","target","isFileSelected","emit","originalEvent","currentFiles","fileLimit","checkFileLimit","hasFiles","auto","isFileLimitExceeded","upload","clearIEInput","clearInputElement","_b","__values","_c","next","done","sFile","value","name","size","document","accept","isFileTypeValid","severity","summary","replace","detail","maxFileSize","formatSize","acceptableTypes","split","map","trim","acceptableTypes_1","acceptableTypes_1_1","isWildcard","getTypeClass","getFileExtension","toLowerCase","fileType","substring","indexOf","pop","test","onImageLoad","img","revokeObjectURL","src","customUpload","markForCheck","uploading","formData_1","FormData","formData","append","post","url","headers","reportProgress","observe","withCredentials","subscribe","HttpEventType","Sent","Response","clear","UploadProgress","Math","round","error","remove","index","splice","focus","isChooseDisabled","toString","basicFileInput","onDragEnter","e","disabled","stopPropagation","preventDefault","DomHandler","addClass","dragHighlight","onDragLeave","removeClass","onDrop","onFocus","onBlur","bytes","floor","log","parseFloat","pow","toFixed","onBasicUploaderClick","getBlockableElement","children","ngOnDestroy","removeEventListener","ElementRef","DomSanitizer","NgZone","HttpClient","ChangeDetectorRef","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Input","Output","ContentChildren","PrimeTemplate","ViewChild","FileUploadModule","NgModule","imports","CommonModule","SharedModule","ButtonModule","ProgressBarModule","MessagesModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,OnDestroy,Input,Output,EventEmitter,TemplateRef,AfterViewInit,AfterContentInit,\n            ContentChildren,QueryList,ViewChild,ElementRef,NgZone,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {ButtonModule} from 'primeng/button';\nimport {MessagesModule} from 'primeng/messages';\nimport {ProgressBarModule} from 'primeng/progressbar';\nimport {DomHandler} from 'primeng/dom';\nimport {Message} from 'primeng/api';\nimport {PrimeTemplate,SharedModule} from 'primeng/api';\nimport {BlockableUI} from 'primeng/api';\nimport {RippleModule} from 'primeng/ripple';  \nimport {HttpClient, HttpEvent, HttpEventType, HttpHeaders} from \"@angular/common/http\";\n\n@Component({\n    selector: 'p-fileUpload',\n    template: `\n        <div [ngClass]=\"'p-fileupload p-fileupload-advanced p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"mode === 'advanced'\">\n            <div class=\"p-fileupload-buttonbar\">\n                <span class=\"p-button p-component p-fileupload-choose\" [ngClass]=\"{'p-focus': focus, 'p-disabled':disabled || isChooseDisabled()}\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" pRipple\n                    (click)=\"choose()\" (keydown.enter)=\"choose()\" tabindex=\"0\"> \n                    <input #advancedfileinput type=\"file\" (change)=\"onFileSelect($event)\" [multiple]=\"multiple\" [accept]=\"accept\" [disabled]=\"disabled || isChooseDisabled()\" [attr.title]=\"''\">\n                    <span [ngClass]=\"'p-button-icon p-button-icon-left'\" [class]=\"chooseIcon\"></span>\n                    <span class=\"p-button-label\">{{chooseLabel}}</span>\n                </span>\n\n                <p-button *ngIf=\"!auto&&showUploadButton\" type=\"button\" [label]=\"uploadLabel\" [icon]=\"uploadIcon\" (onClick)=\"upload()\" [disabled]=\"!hasFiles() || isFileLimitExceeded()\"></p-button>\n                <p-button *ngIf=\"!auto&&showCancelButton\" type=\"button\" [label]=\"cancelLabel\" [icon]=\"cancelIcon\" (onClick)=\"clear()\" [disabled]=\"!hasFiles() ||Â uploading\"></p-button>\n\n                <ng-container *ngTemplateOutlet=\"toolbarTemplate\"></ng-container>\n            </div>\n            <div #content class=\"p-fileupload-content\" (dragenter)=\"onDragEnter($event)\" (dragleave)=\"onDragLeave($event)\" (drop)=\"onDrop($event)\">\n                <p-progressBar [value]=\"progress\" [showValue]=\"false\" *ngIf=\"hasFiles()\"></p-progressBar>\n\n                <p-messages [value]=\"msgs\" [enableService]=\"false\"></p-messages>\n\n                <div class=\"p-fileupload-files\" *ngIf=\"hasFiles()\">\n                    <div *ngIf=\"!fileTemplate\">\n                        <div class=\"p-fileupload-row\" *ngFor=\"let file of files; let i = index;\">\n                            <div><img [src]=\"file.objectURL\" *ngIf=\"isImage(file)\" [width]=\"previewWidth\" /></div>\n                            <div>{{file.name}}</div>\n                            <div>{{formatSize(file.size)}}</div>\n                            <div>\n                                <button type=\"button\" icon=\"pi pi-times\" pButton (click)=\"remove($event,i)\" [disabled]=\"uploading\"></button>\n                            </div>\n                        </div>\n                    </div>\n                    <div *ngIf=\"fileTemplate\">\n                        <ng-template ngFor [ngForOf]=\"files\" [ngForTemplate]=\"fileTemplate\"></ng-template>\n                    </div>\n                </div>\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            </div>\n        </div>\n        <div class=\"p-fileupload p-fileupload-basic p-component\" *ngIf=\"mode === 'basic'\">\n            <p-messages [value]=\"msgs\" [enableService]=\"false\"></p-messages>\n            <span [ngClass]=\"{'p-button p-component p-fileupload-choose': true, 'p-fil(eupload-choose-selected': hasFiles(),'p-focus': focus, 'p-disabled':disabled}\"\n                [ngStyle]=\"style\" [class]=\"styleClass\" (mouseup)=\"onBasicUploaderClick()\" (keydown)=\"onBasicUploaderClick()\" tabindex=\"0\" pRipple>\n                <span class=\"p-button-icon p-button-icon-left pi\" [ngClass]=\"{'pi-plus': !hasFiles()||auto, 'pi-upload': hasFiles()&&!auto}\"></span>\n                <span class=\"p-button-label\">{{auto ? chooseLabel : hasFiles() ? files[0].name : chooseLabel}}</span>\n                <input #basicfileinput type=\"file\" [accept]=\"accept\" [multiple]=\"multiple\" [disabled]=\"disabled\"\n                    (change)=\"onFileSelect($event)\" *ngIf=\"!hasFiles()\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </span>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./fileupload.css']\n})\nexport class FileUpload implements AfterViewInit,AfterContentInit,OnDestroy,BlockableUI {\n\n    @Input() name: string;\n\n    @Input() url: string;\n\n    @Input() method: string = 'POST';\n\n    @Input() multiple: boolean;\n\n    @Input() accept: string;\n\n    @Input() disabled: boolean;\n\n    @Input() auto: boolean;\n\n    @Input() withCredentials: boolean;\n\n    @Input() maxFileSize: number;\n\n    @Input() invalidFileSizeMessageSummary: string = '{0}: Invalid file size, ';\n\n    @Input() invalidFileSizeMessageDetail: string = 'maximum upload size is {0}.';\n\n    @Input() invalidFileTypeMessageSummary: string = '{0}: Invalid file type, ';\n\n    @Input() invalidFileTypeMessageDetail: string = 'allowed file types: {0}.';\n\n    @Input() invalidFileLimitMessageDetail: string = 'limit is {0} at most.';\n\n    @Input() invalidFileLimitMessageSummary: string = 'Maximum number of files exceeded, ';\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() previewWidth: number = 50;\n\n    @Input() chooseLabel: string = 'Choose';\n\n    @Input() uploadLabel: string = 'Upload';\n\n    @Input() cancelLabel: string = 'Cancel';\n\n    @Input() chooseIcon: string = 'pi pi-plus';\n\n    @Input() uploadIcon: string = 'pi pi-upload';\n\n    @Input() cancelIcon: string = 'pi pi-times';\n\n    @Input() showUploadButton: boolean = true;\n\n    @Input() showCancelButton: boolean = true;\n\n    @Input() mode: string = 'advanced';\n\n    @Input() headers: HttpHeaders;\n    \n    @Input() customUpload: boolean;\n\n    @Input() fileLimit: number;\n\n    @Output() onBeforeUpload: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSend: EventEmitter<any> = new EventEmitter();\n\n    @Output() onUpload: EventEmitter<any> = new EventEmitter();\n\n    @Output() onError: EventEmitter<any> = new EventEmitter();\n\n    @Output() onClear: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRemove: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onProgress: EventEmitter<any> = new EventEmitter();\n\n    @Output() uploadHandler: EventEmitter<any> = new EventEmitter();\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @ViewChild('advancedfileinput') advancedFileInput: ElementRef;\n\n    @ViewChild('basicfileinput') basicFileInput: ElementRef;\n\n    @ViewChild('content') content: ElementRef;\n\n    @Input() set files(files) {\n        this._files = [];\n\n        for(let i = 0; i < files.length; i++) {\n            let file = files[i];\n\n            if (this.validate(file)) {\n                if (this.isImage(file)) {\n                    (<any>file).objectURL = this.sanitizer.bypassSecurityTrustUrl((window.URL.createObjectURL(files[i])));\n                }\n\n                this._files.push(files[i]);\n            }\n        }\n    }\n\n    get files(): File[] {\n        return this._files;\n    }\n\n    public _files: File[] = [];\n\n    public progress: number = 0;\n\n    public dragHighlight: boolean;\n\n    public msgs: Message[];\n\n    public fileTemplate: TemplateRef<any>;\n\n    public contentTemplate: TemplateRef<any>;\n\n    public toolbarTemplate: TemplateRef<any>;\n\n    public uploadedFileCount: number = 0;\n\n    focus: boolean;\n\n    uploading: boolean;\n\n    duplicateIEEvent: boolean;  // flag to recognize duplicate onchange event for file input\n\n    constructor(private el: ElementRef, public sanitizer: DomSanitizer, public zone: NgZone, private http: HttpClient, public cd: ChangeDetectorRef){}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'file':\n                    this.fileTemplate = item.template;\n                break;\n\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                case 'toolbar':\n                    this.toolbarTemplate = item.template;\n                break;\n\n                default:\n                    this.fileTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.mode === 'advanced') {\n            this.zone.runOutsideAngular(() => {\n                if (this.content)\n                    this.content.nativeElement.addEventListener('dragover', this.onDragOver.bind(this));\n            });\n        }\n    }\n\n    choose() {\n        this.advancedFileInput.nativeElement.click();\n    }\n\n    onFileSelect(event) {\n        if (event.type !== 'drop' && this.isIE11() && this.duplicateIEEvent) {\n            this.duplicateIEEvent = false;\n            return;\n        }\n\n        this.msgs = [];\n        if (!this.multiple) {\n            this.files = [];\n        }\n\n        let files = event.dataTransfer ? event.dataTransfer.files : event.target.files;\n        for(let i = 0; i < files.length; i++) {\n            let file = files[i];\n\n            if (!this.isFileSelected(file)){\n              if (this.validate(file)) {\n                  if (this.isImage(file)) {\n                      file.objectURL = this.sanitizer.bypassSecurityTrustUrl((window.URL.createObjectURL(files[i])));\n                  }\n\n                  this.files.push(files[i]);\n              }\n            }\n        }\n\n        this.onSelect.emit({originalEvent: event, files: files, currentFiles: this.files});\n\n        if (this.fileLimit && this.mode == \"advanced\") {\n            this.checkFileLimit();\n        }\n\n        if (this.hasFiles() && this.auto && (!(this.mode === \"advanced\") || !this.isFileLimitExceeded())) {\n            this.upload();\n        }\n\n        if (event.type !== 'drop' && this.isIE11()) {\n          this.clearIEInput();\n        } else {\n          this.clearInputElement();\n        }\n    }\n\n    isFileSelected(file: File): boolean{\n        for(let sFile of this.files){\n            if ((sFile.name + sFile.type + sFile.size) === (file.name + file.type+file.size)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isIE11() {\n        return !!window['MSInputMethodContext'] && !!document['documentMode'];\n    }\n\n    validate(file: File): boolean {\n        if (this.accept && !this.isFileTypeValid(file)) {\n            this.msgs.push({\n                severity: 'error',\n                summary: this.invalidFileTypeMessageSummary.replace('{0}', file.name),\n                detail: this.invalidFileTypeMessageDetail.replace('{0}', this.accept)\n            });\n            return false;\n        }\n\n        if (this.maxFileSize  && file.size > this.maxFileSize) {\n            this.msgs.push({\n                severity: 'error',\n                summary: this.invalidFileSizeMessageSummary.replace('{0}', file.name),\n                detail: this.invalidFileSizeMessageDetail.replace('{0}', this.formatSize(this.maxFileSize))\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    private isFileTypeValid(file: File): boolean {\n        let acceptableTypes = this.accept.split(',').map(type => type.trim());\n        for(let type of acceptableTypes) {\n            let acceptable = this.isWildcard(type) ? this.getTypeClass(file.type) === this.getTypeClass(type)\n                                                    : file.type == type || this.getFileExtension(file).toLowerCase() === type.toLowerCase();\n\n            if (acceptable) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    getTypeClass(fileType: string): string {\n        return fileType.substring(0, fileType.indexOf('/'));\n    }\n\n    isWildcard(fileType: string): boolean {\n        return fileType.indexOf('*') !== -1;\n    }\n\n    getFileExtension(file: File): string {\n        return '.' + file.name.split('.').pop();\n    }\n\n    isImage(file: File): boolean {\n        return /^image\\//.test(file.type);\n    }\n\n    onImageLoad(img: any) {\n        window.URL.revokeObjectURL(img.src);\n    }\n\n    upload() {\n        if (this.customUpload) {\n            if (this.fileLimit) {\n                this.uploadedFileCount += this.files.length; \n            }\n            \n            this.uploadHandler.emit({\n                files: this.files\n            });\n\n            this.cd.markForCheck();\n        }\n        else {\n            this.uploading = true;\n            this.msgs = [];\n            let formData = new FormData();\n\n            this.onBeforeUpload.emit({\n                'formData': formData\n            });\n\n            for (let i = 0; i < this.files.length; i++) {\n                formData.append(this.name, this.files[i], this.files[i].name);\n            }\n\n            this.http.post(this.url, formData, {\n                headers: this.headers, reportProgress: true, observe: 'events', withCredentials: this.withCredentials\n            }).subscribe( (event: HttpEvent<any>) => {\n                    switch (event.type) {\n                        case HttpEventType.Sent:\n                            this.onSend.emit({\n                                originalEvent: event,\n                                'formData': formData\n                            });\n                            break;\n                        case HttpEventType.Response:\n                            this.uploading = false;\n                            this.progress = 0;\n\n                            if (event['status'] >= 200 && event['status'] < 300) {\n                                if (this.fileLimit) {\n                                    this.uploadedFileCount += this.files.length; \n                                }\n\n                                this.onUpload.emit({originalEvent: event, files: this.files});\n                            } else {\n                                this.onError.emit({files: this.files});\n                            }\n\n                            this.clear();\n                            break;\n                        case HttpEventType.UploadProgress: {\n                            if (event['loaded']) {\n                                this.progress = Math.round((event['loaded'] * 100) / event['total']);\n                            }\n\n                            this.onProgress.emit({originalEvent: event, progress: this.progress});\n                            break;\n                        }\n                    }\n\n                    this.cd.markForCheck();\n                },\n                error => {\n                    this.uploading = false;\n                    this.onError.emit({files: this.files, error: error});\n                });\n        }\n    }\n\n    clear() {\n        this.files = [];\n        this.onClear.emit();\n        this.clearInputElement();\n        this.cd.markForCheck();\n    }\n\n    remove(event: Event, index: number) {\n        this.clearInputElement();\n        this.onRemove.emit({originalEvent: event, file: this.files[index]});\n        this.files.splice(index, 1);\n    }\n\n    isFileLimitExceeded() {\n        if (this.fileLimit && this.fileLimit <= this.files.length + this.uploadedFileCount && this.focus) {\n            this.focus = false;\n        }\n\n        return this.fileLimit && this.fileLimit < this.files.length + this.uploadedFileCount;\n    }\n\n    isChooseDisabled() {\n        return this.fileLimit && this.fileLimit <= this.files.length + this.uploadedFileCount;\n    }\n\n    checkFileLimit() {\n        if (this.isFileLimitExceeded()) {\n            this.msgs.push({\n                severity: 'error',\n                summary: this.invalidFileLimitMessageSummary.replace('{0}', this.fileLimit.toString()),\n                detail: this.invalidFileLimitMessageDetail.replace('{0}', this.fileLimit.toString())\n            });\n        }\n    }\n\n    clearInputElement() {\n        if (this.advancedFileInput && this.advancedFileInput.nativeElement) {\n            this.advancedFileInput.nativeElement.value = '';\n        }\n\n        if (this.basicFileInput && this.basicFileInput.nativeElement) {\n            this.basicFileInput.nativeElement.value = '';\n        }\n    }\n\n    clearIEInput() {\n        if (this.advancedFileInput && this.advancedFileInput.nativeElement) {\n            this.duplicateIEEvent = true; //IE11 fix to prevent onFileChange trigger again\n            this.advancedFileInput.nativeElement.value = '';\n        }\n    }\n\n    hasFiles(): boolean {\n        return this.files && this.files.length > 0;\n    }\n\n    onDragEnter(e) {\n        if (!this.disabled) {\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    }\n\n    onDragOver(e) {\n        if (!this.disabled) {\n            DomHandler.addClass(this.content.nativeElement, 'p-fileupload-highlight');\n            this.dragHighlight = true;\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    }\n\n    onDragLeave(event) {\n        if (!this.disabled) {\n            DomHandler.removeClass(this.content.nativeElement, 'p-fileupload-highlight');\n        }\n    }\n\n    onDrop(event) {\n        if (!this.disabled) {\n            DomHandler.removeClass(this.content.nativeElement, 'p-fileupload-highlight');\n            event.stopPropagation();\n            event.preventDefault();\n\n            let files = event.dataTransfer ? event.dataTransfer.files : event.target.files;\n            let allowDrop = this.multiple||(files && files.length === 1);\n\n            if (allowDrop) {\n                this.onFileSelect(event);\n            }\n        }\n    }\n\n    onFocus() {\n        this.focus = true;\n    }\n\n    onBlur() {\n        this.focus = false;\n    }\n\n    formatSize(bytes) {\n        if (bytes == 0) {\n            return '0 B';\n        }\n        let k = 1024,\n        dm = 3,\n        sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n        i = Math.floor(Math.log(bytes) / Math.log(k));\n\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n\n    onBasicUploaderClick(event: Event) {\n        if (this.hasFiles())\n            this.upload();\n        else\n            this.basicFileInput.nativeElement.click();\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n      return this.el.nativeElement.children[0];\n    }\n\n    ngOnDestroy() {\n        if (this.content && this.content.nativeElement) {\n            this.content.nativeElement.removeEventListener('dragover', this.onDragOver);\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,SharedModule,ButtonModule,ProgressBarModule,MessagesModule,RippleModule],\n    exports: [FileUpload,SharedModule,ButtonModule,ProgressBarModule,MessagesModule],\n    declarations: [FileUpload]\n})\nexport class FileUploadModule { }\n"]}