{"version":3,"sources":["ng://primeng/toast/toast.ts"],"names":["ToastItem","zone","this","onClose","EventEmitter","prototype","ngAfterViewInit","initTimeout","_this","message","sticky","runOutsideAngular","timeout","setTimeout","emit","index","life","clearTimeout","onMouseEnter","onMouseLeave","onCloseIconClick","event","preventDefault","ngOnDestroy","NgZone","Component","args","selector","template","animations","trigger","state","style","transform","opacity","transition","animate","height","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","Input","Output","ViewChild","Toast","messageService","cd","autoZIndex","baseZIndex","position","preventOpenDuplicates","preventDuplicates","showTransformOptions","hideTransformOptions","showTransitionOptions","hideTransitionOptions","ngOnInit","messageSubscription","messageObserver","subscribe","messages","Array","filteredMessages","filter","m","canAdd","add","clearSubscription","clearObserver","key","markForCheck","__spread","messagesArchieve","allow","containsMessage","collection","find","summary","detail","severity","ngAfterContentInit","templates","forEach","item","getType","onMessageClose","splice","detectChanges","onAnimationStart","fromState","containerViewChild","nativeElement","zIndex","String","DomHandler","zindex","unsubscribe","MessageService","ChangeDetectorRef","query","animateChild","ContentChildren","PrimeTemplate","ToastModule","NgModule","imports","CommonModule","RippleModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,OnInit,AfterViewInit,AfterContentInit,OnDestroy,ElementRef,ViewChild,EventEmitter,ContentChildren,QueryList,TemplateRef,ChangeDetectionStrategy, NgZone, ChangeDetectorRef, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Message} from 'primeng/api';\nimport {DomHandler} from 'primeng/dom';\nimport {PrimeTemplate,SharedModule} from 'primeng/api';\nimport {MessageService} from 'primeng/api';\nimport {RippleModule} from 'primeng/ripple';\nimport {Subscription} from 'rxjs';\nimport {trigger,state,style,transition,animate,query,animateChild,AnimationEvent} from '@angular/animations';\n\n@Component({\n    selector: 'p-toastItem',\n    template: `\n        <div #container [attr.id]=\"message.id\" class=\"p-toast-message\" [ngClass]=\"'p-toast-message-' + message.severity\" [@messageState]=\"{value: 'visible', params: {showTransformParams: showTransformOptions, hideTransformParams: hideTransformOptions, showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\"\n                (mouseenter)=\"onMouseEnter()\" (mouseleave)=\"onMouseLeave()\">\n            <div class=\"p-toast-message-content\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n                <ng-container *ngIf=\"!template\">\n                    <span class=\"p-toast-message-icon pi\" [ngClass]=\"{'pi-info-circle': message.severity == 'info', 'pi-exclamation-triangle': message.severity == 'warn',\n                        'pi-times-circle': message.severity == 'error', 'pi-check' :message.severity == 'success'}\"></span>\n                    <div class=\"p-toast-message-text\">\n                        <div class=\"p-toast-summary\">{{message.summary}}</div>\n                        <div class=\"p-toast-detail\">{{message.detail}}</div>\n                    </div>\n                </ng-container>\n                <button type=\"button\" class=\"p-toast-icon-close p-link\" (click)=\"onCloseIconClick($event)\" (keydown.enter)=\"onCloseIconClick($event)\" *ngIf=\"message.closable !== false\" pRipple>\n                    <span class=\"p-toast-icon-close-icon pi pi-times\"></span>\n                </button>\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: message}\"></ng-container>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('messageState', [\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => *', [\n                style({transform: '{{showTransformParams}}', opacity: 0}),\n                animate('{{showTransitionParams}}')\n            ]),\n            transition('* => void', [\n                animate(('{{hideTransitionParams}}'), style({\n                    height: 0,\n                    opacity: 0,\n                    transform: '{{hideTransformParams}}'\n                }))\n            ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToastItem implements AfterViewInit, OnDestroy {\n\n    @Input() message: Message;\n\n    @Input() index: number;\n\n    @Input() template: TemplateRef<any>;\n\n    @Input() showTransformOptions: string;\n\n    @Input() hideTransformOptions: string;\n\n    @Input() showTransitionOptions: string;\n\n    @Input() hideTransitionOptions: string;\n\n    @Output() onClose: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    timeout: any;\n\n    constructor(private zone: NgZone) {}\n    \n    ngAfterViewInit() {\n        this.initTimeout();\n    }\n\n    initTimeout() {\n        if (!this.message.sticky) {\n            this.zone.runOutsideAngular(() => {\n                this.timeout = setTimeout(() => {\n                    this.onClose.emit({\n                        index: this.index,\n                        message: this.message\n                    });\n                }, this.message.life || 3000);\n            });\n        }\n    }\n\n    clearTimeout() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n    }\n    \n    onMouseEnter() {\n        this.clearTimeout();\n    }\n\n    onMouseLeave() {\n        this.initTimeout();\n    }\n \n    onCloseIconClick(event) {\n        this.clearTimeout();\n        \n        this.onClose.emit({\n            index: this.index,\n            message: this.message\n        });\n\n        event.preventDefault();\n    }\n\n    ngOnDestroy() {\n        this.clearTimeout();\n    }\n}\n\n@Component({\n    selector: 'p-toast',\n    template: `\n        <div #container [ngClass]=\"'p-toast p-component p-toast-' + position\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <p-toastItem *ngFor=\"let msg of messages; let i=index\" [message]=\"msg\" [index]=\"i\" (onClose)=\"onMessageClose($event)\"\n                    [template]=\"template\" @toastAnimation (@toastAnimation.start)=\"onAnimationStart($event)\" \n                    [showTransformOptions]=\"showTransformOptions\" [hideTransformOptions]=\"hideTransformOptions\" \n                    [showTransitionOptions]=\"showTransitionOptions\" [hideTransitionOptions]=\"hideTransitionOptions\"></p-toastItem>\n        </div>\n    `,\n    animations: [\n        trigger('toastAnimation', [\n            transition(':enter, :leave', [\n                query('@*', animateChild())\n            ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./toast.css']\n})\nexport class Toast implements OnInit,AfterContentInit,OnDestroy {\n\n    @Input() key: string;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() position: string = 'top-right';\n\n    @Input() preventOpenDuplicates: boolean = false;\n\n    @Input() preventDuplicates: boolean = false;\n    \n    @Input() showTransformOptions: string = 'translateY(100%)';\n\n    @Input() hideTransformOptions: string = 'translateY(-100%)';\n\n    @Input() showTransitionOptions: string = '300ms ease-out';\n\n    @Input() hideTransitionOptions: string = '250ms ease-in';\n\n    @Output() onClose: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    messageSubscription: Subscription;\n\n    clearSubscription: Subscription;\n\n    messages: Message[];\n\n    messagesArchieve: Message[];\n\n    template: TemplateRef<any>;\n    \n    constructor(public messageService: MessageService, private cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.messageSubscription = this.messageService.messageObserver.subscribe(messages => {\n            if (messages) {\n                if (messages instanceof Array) {\n                    const filteredMessages = messages.filter(m => this.canAdd(m));\n                    this.add(filteredMessages);\n                }\n                else if (this.canAdd(messages)) {\n                    this.add([messages]);\n                }\n            }\n        });\n\n        this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n            if (key) {\n                if (this.key === key) {\n                    this.messages = null;\n                }\n            }\n            else {\n                this.messages = null;\n            }\n\n            this.cd.markForCheck();\n        });       \n    }\n\n    add(messages: Message[]): void {\n        this.messages = this.messages ? [...this.messages, ...messages] : [...messages];\n\n        if (this.preventDuplicates) {\n            this.messagesArchieve = this.messagesArchieve ? [...this.messagesArchieve, ...messages] : [...messages];\n        }\n\n        this.cd.markForCheck();\n    }\n\n    canAdd(message: Message): boolean {\n        let allow = this.key === message.key;\n\n        if (allow && this.preventOpenDuplicates) {\n            allow = !this.containsMessage(this.messages, message);\n        }\n\n        if (allow && this.preventDuplicates) {\n            allow = !this.containsMessage(this.messagesArchieve, message);\n        }\n\n        return allow;\n    }\n\n    containsMessage(collection: Message[], message: Message): boolean {\n        if (!collection) {\n            return false;\n        }\n\n        return collection.find(m => {\n           return ((m.summary === message.summary) && (m.detail == message.detail) && (m.severity === message.severity));\n        }) != null;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'message':\n                    this.template = item.template;\n                break;\n\n                default:\n                    this.template = item.template;\n                break;\n            }\n        });\n    }\n\n    onMessageClose(event) {\n        this.messages.splice(event.index, 1);\n\n        this.onClose.emit({\n            message: event.message\n        });\n\n        this.cd.detectChanges();\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        if (event.fromState === 'void' && this.autoZIndex) {\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n\n    ngOnDestroy() {        \n        if (this.messageSubscription) {\n            this.messageSubscription.unsubscribe();\n        }\n        \n        if (this.clearSubscription) {\n            this.clearSubscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [Toast,SharedModule],\n    declarations: [Toast,ToastItem]\n})\nexport class ToastModule { }\n"]}