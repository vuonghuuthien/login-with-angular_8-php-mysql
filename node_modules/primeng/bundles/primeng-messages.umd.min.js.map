{"version":3,"sources":["ng://primeng/messages/messages.ts"],"names":["Messages","messageService","el","cd","this","closable","enableService","escape","showTransitionOptions","hideTransitionOptions","valueChange","EventEmitter","prototype","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","messageSubscription","messageObserver","subscribe","messages","Array","filteredMessages","filter","m","key","value","__spread","markForCheck","clearSubscription","clearObserver","hasMessages","parentEl","nativeElement","parentElement","offsetParent","length","clear","emit","removeMessage","i","msg","index","Object","defineProperty","severity","ngOnDestroy","unsubscribe","MessageService","decorators","type","Optional","ElementRef","ChangeDetectorRef","Component","args","selector","animations","trigger","transition","style","opacity","transform","animate","height","margin","overflow","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Input","ContentChildren","PrimeTemplate","Output","MessagesModule","NgModule","imports","CommonModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,OnDestroy,Input,Output,EventEmitter,AfterContentInit,Optional,ElementRef,ChangeDetectionStrategy,ContentChildren,QueryList,TemplateRef, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {Message,PrimeTemplate,MessageService} from 'primeng/api';\nimport {Subscription} from 'rxjs';\nimport {RippleModule} from 'primeng/ripple';\n\n@Component({\n    selector: 'p-messages',\n    template: `\n        <div class=\"p-messages p-component\" role=\"alert\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ng-container *ngIf=\"!contentTemplate; else staticMessage\">\n                <div *ngFor=\"let msg of value; let i=index\" [ngClass]=\"'p-message p-message-' + msg.severity\" role=\"alert\" \n                    [@messageAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\">\n                    <div class=\"p-message-wrapper\">\n                        <span class=\"p-message-icon pi\" [ngClass]=\"{'pi-info-circle': msg.severity === 'info', \n                            'pi-check': msg.severity === 'success',\n                            'pi-exclamation-triangle': msg.severity === 'warn',\n                            'pi-times-circle': msg.severity === 'error'}\"></span>\n                        <ng-container *ngIf=\"!escape; else escapeOut\">\n                            <span *ngIf=\"msg.summary\" class=\"p-message-summary\" [innerHTML]=\"msg.summary\"></span>\n                            <span *ngIf=\"msg.detail\" class=\"p-message-detail\" [innerHTML]=\"msg.detail\"></span>\n                        </ng-container>\n                        <ng-template #escapeOut>\n                            <span *ngIf=\"msg.summary\" class=\"p-message-summary\">{{msg.summary}}</span>\n                            <span *ngIf=\"msg.detail\" class=\"p-message-detail\">{{msg.detail}}</span>\n                        </ng-template>\n                        <button class=\"p-message-close p-link\" (click)=\"removeMessage(i)\" *ngIf=\"closable\" type=\"button\" pRipple>\n                            <i class=\"p-message-close-icon pi pi-times\"></i>\n                        </button>\n                    </div>\n                </div>\n            </ng-container>\n            <ng-template #staticMessage>\n                <div [ngClass]=\"'p-message p-message-' + severity\" role=\"alert\">\n                    <div class=\"p-message-wrapper\">\n                        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                    </div>\n                </div>\n            </ng-template>\n            </div>\n    `,\n    animations: [\n        trigger('messageAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'translateY(-25%)'}),\n                animate('{{showTransitionParams}}')\n            ]),\n            transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ height:0, margin: 0, overflow: 'hidden', opacity: 0 }))\n            ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./messages.css']\n})\nexport class Messages implements AfterContentInit, OnDestroy {\n\n    @Input() value: Message[];\n\n    @Input() closable: boolean = true;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() enableService: boolean = true;\n\n    @Input() key: string;\n\n    @Input() escape: boolean = true;\n\n    @Input() severity: string;\n\n    @Input() showTransitionOptions: string = '300ms ease-out';\n\n    @Input() hideTransitionOptions: string = '200ms cubic-bezier(0.86, 0, 0.07, 1)';\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @Output() valueChange: EventEmitter<Message[]> = new EventEmitter<Message[]>();\n\n    messageSubscription: Subscription;\n\n    clearSubscription: Subscription;\n\n    contentTemplate: TemplateRef<any>;\n\n    constructor(@Optional() public messageService: MessageService, public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n\n        if (this.messageService && this.enableService && !this.contentTemplate) {\n            this.messageSubscription = this.messageService.messageObserver.subscribe((messages: any) => {\n                if (messages) {\n                    if (messages instanceof Array) {\n                        let filteredMessages = messages.filter(m => this.key === m.key);\n                        this.value = this.value ? [...this.value, ...filteredMessages] : [...filteredMessages];\n                    }\n                    else if (this.key === messages.key) {\n                        this.value = this.value ? [...this.value, ...[messages]] : [messages];\n                    }\n\n                    this.cd.markForCheck();\n                }\n            });\n\n            this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n                if (key) {\n                    if (this.key === key) {\n                        this.value = null;\n                    }\n                }\n                else {\n                    this.value = null;\n                }\n\n                this.cd.markForCheck();\n            });\n        }\n    }\n\n    hasMessages() {\n        let parentEl = this.el.nativeElement.parentElement;\n        if (parentEl && parentEl.offsetParent) {\n            return this.contentTemplate != null || this.value && this.value.length > 0;\n        }\n\n        return false;\n    }\n\n    clear() {\n        this.value = [];\n        this.valueChange.emit(this.value);\n    }\n\n    removeMessage(i: number) {\n        this.value = this.value.filter((msg, index) => index !== i);\n    }\n\n    get icon(): string {\n        const severity = this.severity || (this.hasMessages() ? this.value[0].severity : null);\n\n        if (this.hasMessages()) {\n            switch(severity) {\n                case 'success':\n                    return 'pi-check';\n                break;\n\n                case 'info':\n                    return 'pi-info-circle';\n                break;\n\n                case 'error':\n                    return 'pi-times';\n                break;\n\n                case 'warn':\n                    return 'pi-exclamation-triangle';\n                break;\n\n                default:\n                    return 'pi-info-circle';\n                break;\n            }\n        }\n\n        return null;\n    }\n\n    ngOnDestroy() {\n        if (this.messageSubscription) {\n            this.messageSubscription.unsubscribe();\n        }\n\n        if (this.clearSubscription) {\n            this.clearSubscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [Messages],\n    declarations: [Messages]\n})\nexport class MessagesModule { }\n"]}