{"version":3,"sources":["ng://primeng/slidemenu/slidemenu.ts"],"names":["SlideMenuSub","slideMenu","this","backLabel","easing","prototype","itemClick","event","item","listitem","_this","disabled","preventDefault","url","command","originalEvent","items","animating","left","menuWidth","activeItem","setTimeout","effectDuration","popup","hide","ngOnDestroy","Inject","args","forwardRef","SlideMenu","Component","selector","template","encapsulation","ViewEncapsulation","None","Input","el","renderer","cd","viewportHeight","autoZIndex","baseZIndex","showTransitionOptions","hideTransitionOptions","onShow","EventEmitter","onHide","ngAfterViewChecked","viewportUpdated","containerViewChild","updateViewPort","Object","defineProperty","element","backwardViewChild","slideMenuContentViewChild","nativeElement","style","height","DomHandler","getHiddenElementOuterHeight","toggle","visible","show","preventDocumentDefault","target","currentTarget","markForCheck","onOverlayAnimationStart","toState","moveOnTop","emit","appendOverlay","absolutePosition","bindDocumentClickListener","bindDocumentResizeListener","onOverlayHide","appendTo","document","body","appendChild","restoreOverlayAppend","container","zIndex","String","zindex","onWindowResize","onClick","goBack","documentClickListener","listen","detectChanges","unbindDocumentClickListener","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","ElementRef","Renderer2","ChangeDetectorRef","animations","trigger","transition","opacity","transform","animate","changeDetection","ChangeDetectionStrategy","OnPush","Output","ViewChild","SlideMenuModule","NgModule","imports","CommonModule","RouterModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,AfterViewChecked,OnDestroy,Input,Renderer2,Inject,forwardRef,ViewChild,Output,EventEmitter,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {MenuItem} from 'primeng/api';\nimport {RouterModule} from '@angular/router';\n\n@Component({\n    selector: 'p-slideMenuSub',\n    template: `\n        <ul [ngClass]=\"{'p-slidemenu-rootlist':root, 'p-submenu-list':!root, 'p-active-submenu': (-slideMenu.left == (index * menuWidth))}\"\n            [style.width.px]=\"menuWidth\" [style.left.px]=\"root ? slideMenu.left : slideMenu.menuWidth\"\n            [style.transitionProperty]=\"root ? 'left' : 'none'\" [style.transitionDuration]=\"effectDuration + 'ms'\" [style.transitionTimingFunction]=\"easing\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"p-menu-separator\" [ngClass]=\"{'p-hidden': child.visible === false}\">\n                <li *ngIf=\"!child.separator\" #listitem [ngClass]=\"{'p-menuitem':true,'p-menuitem-active':listitem==activeItem,'p-hidden': child.visible === false}\"\n                    [class]=\"child.styleClass\" [ngStyle]=\"child.style\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url\" class=\"p-menuitem-link\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\"\n                        [ngClass]=\"{'p-disabled':child.disabled}\" [attr.tabindex]=\"child.disabled ? null : '0'\" \n                        (click)=\"itemClick($event, child, listitem)\">\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\">{{child.label}}</span>\n                        <span class=\"p-submenu-icon pi pi-fw pi-angle-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" \n                        [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" [href]=\"child.url\" class=\"p-menuitem-link\" \n                        [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\" \n                        [ngClass]=\"{'p-disabled':child.disabled}\" \n                        (click)=\"itemClick($event, child, listitem)\"\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\">\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\">{{child.label}}</span>\n                        <span class=\"p-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <p-slideMenuSub class=\"p-submenu\" [item]=\"child\" [index]=\"index + 1\" [menuWidth]=\"menuWidth\" *ngIf=\"child.items\"></p-slideMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class SlideMenuSub implements OnDestroy {\n\n    @Input() item: MenuItem;\n    \n    @Input() root: boolean;\n    \n    @Input() backLabel: string = 'Back';\n    \n    @Input() menuWidth: number;\n    \n    @Input() effectDuration: any;\n        \n    @Input() easing: string = 'ease-out';\n\n    @Input() index: number;\n\n    slideMenu: SlideMenu;\n    \n    constructor(@Inject(forwardRef(() => SlideMenu)) slideMenu) {\n        this.slideMenu = slideMenu as SlideMenu;\n    }\n             \n    activeItem: any;\n                            \n    itemClick(event, item: MenuItem, listitem: any)Â {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n        \n        if (!item.url) {\n            event.preventDefault();\n        }\n                \n        if (item.command) {            \n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n        \n        if (item.items && !this.slideMenu.animating) {\n            this.slideMenu.left -= this.slideMenu.menuWidth;\n            \n            this.activeItem = listitem;\n            this.slideMenu.animating = true;\n            setTimeout(() => this.slideMenu.animating = false, this.effectDuration);\n        }\n\n        if (!item.items && this.slideMenu.popup) {\n            this.slideMenu.hide();\n        }\n    }\n        \n    ngOnDestroy() {\n        this.activeItem = null;\n    }\n}\n\n@Component({\n    selector: 'p-slideMenu',\n    template: `\n        <div #container [ngClass]=\"{'p-slidemenu p-component':true, 'p-slidemenu-overlay':popup}\" \n            [class]=\"styleClass\" [ngStyle]=\"style\" (click)=\"onClick($event)\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" [@.disabled]=\"popup !== true\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" *ngIf=\"!popup || visible\">\n            <div class=\"p-slidemenu-wrapper\" [style.height]=\"left ? viewportHeight + 'px' : 'auto'\">\n                <div #slideMenuContent class=\"p-slidemenu-content\">\n                    <p-slideMenuSub [item]=\"model\" root=\"root\" [index]=\"0\" [menuWidth]=\"menuWidth\" [effectDuration]=\"effectDuration\" [easing]=\"easing\"></p-slideMenuSub>\n                </div>\n                <div #backward class=\"p-slidemenu-backward\" [style.display]=\"left ? 'block' : 'none'\" (click)=\"goBack()\">\n                    <span class=\"p-slidemenu-backward-icon pi pi-fw pi-caret-left\"></span><span>{{backLabel}}</span>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('{{showTransitionParams}}')\n              ]),\n              transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n              ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./slidemenu.css']\n})\nexport class SlideMenu implements AfterViewChecked, OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() popup: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() menuWidth: number = 190;\n    \n    @Input() viewportHeight: number = 180;\n    \n    @Input() effectDuration: any = 250;\n        \n    @Input() easing: string = 'ease-out';\n    \n    @Input() backLabel: string = 'Back';\n    \n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n\n    containerViewChild: ElementRef;\n    \n    backwardViewChild: ElementRef;\n    \n    slideMenuContentViewChild: ElementRef;\n     \n    documentClickListener: any;\n\n    documentResizeListener: any;\n    \n    preventDocumentDefault: boolean;\n        \n    left: number = 0;\n    \n    animating: boolean = false;\n    \n    target: any;\n\n    visible: boolean;\n\n    viewportUpdated: boolean;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef) {}\n\n    ngAfterViewChecked() {\n        if (!this.viewportUpdated && !this.popup && this.containerViewChild) {\n            this.updateViewPort();\n            this.viewportUpdated = true;\n        }\n    }\n\n    @ViewChild('container') set container(element: ElementRef) {\n        this.containerViewChild = element;\n    }\n\n    @ViewChild('backward') set backward(element: ElementRef) {\n        this.backwardViewChild = element;\n    }\n\n    @ViewChild('slideMenuContent') set slideMenuContent(element: ElementRef) {\n        this.slideMenuContentViewChild = element;\n    }\n\n    updateViewPort() {\n        this.slideMenuContentViewChild.nativeElement.style.height = this.viewportHeight - DomHandler.getHiddenElementOuterHeight(this.backwardViewChild.nativeElement) + 'px';\n    }\n    \n    toggle(event) {\n        if (this.visible)\n            this.hide();\n        else\n            this.show(event);\n\n        this.preventDocumentDefault = true;\n    }\n    \n    show(event) {\n        this.target = event.currentTarget;\n        this.visible = true;\n        this.preventDocumentDefault = true;\n        this.cd.markForCheck();\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                if (this.popup) {\n                    this.updateViewPort();\n                    this.moveOnTop();\n                    this.onShow.emit({});\n                    this.appendOverlay();\n                    DomHandler.absolutePosition(this.containerViewChild.nativeElement, this.target);\n                    this.bindDocumentClickListener();\n                    this.bindDocumentResizeListener();\n                }\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n                this.onHide.emit({});\n            break;\n        }\n    }\n    \n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.containerViewChild.nativeElement);\n            else\n                DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\n        }\n    }\n    \n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n\n    hide() {\n        this.visible = false;\n        this.cd.markForCheck();\n    }\n\n    onWindowResize() {\n        this.hide();\n    }\n    \n    onClick(event) {\n        this.preventDocumentDefault = true;\n    }\n    \n    goBack() {\n        this.left += this.menuWidth;\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', () => {\n                if (!this.preventDocumentDefault) {\n                    this.hide();\n                    this.cd.detectChanges();\n                }\n\n                this.preventDocumentDefault = false;\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onOverlayHide()Â {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.preventDocumentDefault = false;\n        this.target = null;\n        this.left = 0;\n    }\n        \n    ngOnDestroy() {\n        if (this.popup) {\n            this.restoreOverlayAppend();\n            this.onOverlayHide();\n        }\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule],\n    exports: [SlideMenu,RouterModule],\n    declarations: [SlideMenu,SlideMenuSub]\n})\nexport class SlideMenuModule { }\n"]}