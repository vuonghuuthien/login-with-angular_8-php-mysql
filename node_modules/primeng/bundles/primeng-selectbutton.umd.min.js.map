{"version":3,"sources":["ng://primeng/selectbutton/selectbutton.ts"],"names":["SELECTBUTTON_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","SelectButton","multi","cd","this","tabindex","onOptionClick","EventEmitter","onChange","onModelChange","onModelTouched","Object","defineProperty","prototype","_options","val","ngOnChanges","simpleChange","options","optionLabel","ObjectUtils","generateSelectItems","currentValue","writeValue","value","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","onItemClick","event","option","index","multiple","itemIndex_1","findItemIndex","filter","i","__spread","emit","originalEvent","onBlur","isSelected","equals","dataKey","length","ChangeDetectorRef","Component","args","selector","template","providers","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Input","Output","ContentChild","TemplateRef","SelectButtonModule","NgModule","imports","CommonModule","RippleModule","exports","declarations"],"mappings":"q8BAOaA,EAAmC,CAC9CC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,GAGTD,EAAA,WAuDI,SAAAA,EAAoBE,GAAAC,KAAAD,GAAAA,EA9BXC,KAAAC,SAAmB,EAgBlBD,KAAAE,cAAmC,IAAIC,EAAAA,aAEvCH,KAAAI,SAA8B,IAAID,EAAAA,aAQ5CH,KAAAK,cAA0B,aAE1BL,KAAAM,eAA2B,aAwF/B,OApFIC,OAAAC,eAAaX,EAAAY,UAAA,UAAO,KAApB,WACI,OAAOT,KAAKU,cAGhB,SAAYC,qCAIZd,EAAAY,UAAAG,YAAA,SAAYC,GACJA,EAAaC,UACbd,KAAKU,SAAWV,KAAKe,YAAcC,EAAAA,YAAYC,oBAAoBJ,EAAaC,QAAQI,aAAclB,KAAKe,aAAeF,EAAaC,QAAQI,eAIvJrB,EAAAY,UAAAU,WAAA,SAAWC,GACPpB,KAAKoB,MAAQA,EACbpB,KAAKD,GAAGsB,gBAGZxB,EAAAY,UAAAa,iBAAA,SAAiBC,GACbvB,KAAKK,cAAgBkB,GAGzB1B,EAAAY,UAAAe,kBAAA,SAAkBD,GACdvB,KAAKM,eAAiBiB,GAG1B1B,EAAAY,UAAAgB,iBAAA,SAAiBd,GACbX,KAAK0B,SAAWf,GAGpBd,EAAAY,UAAAkB,YAAA,SAAYC,EAAOC,EAAoBC,GACnC,IAAI9B,KAAK0B,WAAYG,EAAOH,SAA5B,CAIA,GAAI1B,KAAK+B,SAAU,CACf,IAAIC,EAAYhC,KAAKiC,cAAcJ,GAE/B7B,KAAKoB,OADS,GAAdY,EACahC,KAAKoB,MAAMc,QAAO,SAACvB,EAAIwB,GAAM,OAAAA,GAAGH,KAEnCI,EAAOpC,KAAKoB,OAAO,GAAE,CAAES,EAAOT,aAG5CpB,KAAKoB,MAAQS,EAAOT,MAGxBpB,KAAKE,cAAcmC,KAAK,CACpBC,cAAeV,EACfC,OAAQA,EACRC,MAAOA,IAGX9B,KAAKK,cAAcL,KAAKoB,OAExBpB,KAAKI,SAASiC,KAAK,CACfC,cAAeV,EACfR,MAAOpB,KAAKoB,UAIpBvB,EAAAY,UAAA8B,OAAA,SAAOX,GACH5B,KAAKM,kBAGTT,EAAAY,UAAA+B,WAAA,SAAWX,GACP,OAAI7B,KAAK+B,UACiC,GAA/B/B,KAAKiC,cAAcJ,GAEnBb,EAAAA,YAAYyB,OAAOZ,EAAOT,MAAOpB,KAAKoB,MAAOpB,KAAK0C,UAGjE7C,EAAAY,UAAAwB,cAAA,SAAcJ,GACV,IAAIC,GAAS,EACb,GAAI9B,KAAKoB,MACL,IAAI,IAAIe,EAAI,EAAGA,EAAInC,KAAKoB,MAAMuB,OAAQR,IAClC,GAAInC,KAAKoB,MAAMe,IAAMN,EAAOT,MAAO,CAC/BU,EAAQK,EACR,MAIZ,OAAOL,4CApFac,EAAAA,yCAvD3BC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,iBACVC,SAAU,0xCAgBVC,UAAW,CAACzD,GACZ0D,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,kwCAjC2BX,EAAAA,uDAsC3DY,EAAAA,wBAEAA,EAAAA,qBAEAA,EAAAA,0BAEAA,EAAAA,8BAEAA,EAAAA,wBAEAA,EAAAA,uBAEAA,EAAAA,2BAEAA,EAAAA,6BAEAC,EAAAA,yBAEAA,EAAAA,6BAEAC,EAAAA,aAAYZ,KAAA,CAACa,EAAAA,8BAYbH,EAAAA,SAoFL3D,EA7IA,gBA+IA,SAAA+D,KAKkC,2BALjCC,EAAAA,SAAQf,KAAA,CAAC,CACNgB,QAAS,CAACC,EAAAA,aAAaC,EAAAA,cACvBC,QAAS,CAACpE,GACVqE,aAAc,CAACrE,OAEe+D","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ContentChild,TemplateRef,SimpleChanges,OnChanges,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectItem} from 'primeng/api';\nimport {ObjectUtils} from 'primeng/utils';\nimport {RippleModule} from 'primeng/ripple';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const SELECTBUTTON_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectButton),\n  multi: true\n};\n\n@Component({\n    selector: 'p-selectButton',\n    template: `\n        <div [ngClass]=\"'p-selectbutton p-buttonset p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\"  role=\"group\">\n            <div *ngFor=\"let option of options; let i = index\" #btn class=\"p-button p-component\" [class]=\"option.styleClass\" role=\"button\" [attr.aria-pressed]=\"isSelected(option)\"\n                [ngClass]=\"{'p-highlight':isSelected(option), 'p-disabled': disabled || option.disabled, \n                'p-button-icon-only': (option.icon && !option.label)}\" (click)=\"onItemClick($event,option,i)\" (keydown.enter)=\"onItemClick($event,option,i)\"\n                [attr.title]=\"option.title\" [attr.aria-label]=\"option.label\" (blur)=\"onBlur($event)\" [attr.tabindex]=\"tabindex\" [attr.aria-labelledby]=\"ariaLabelledBy\" pRipple>\n                <ng-container *ngIf=\"!itemTemplate else customcontent\">\n                    <span [ngClass]=\"'p-button-icon p-button-icon-left'\" [class]=\"option.icon\" *ngIf=\"option.icon\"></span>\n                    <span class=\"p-button-label\">{{option.label}}</span>\n                </ng-container>\n                <ng-template #customcontent>\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: i}\"></ng-container>\n                </ng-template>\n            </div>\n        </div>\n    `,\n    providers: [SELECTBUTTON_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./selectbutton.css', '../button/button.css']\n})\nexport class SelectButton implements ControlValueAccessor, OnChanges {\n\n    @Input() tabindex: number = 0;\n\n    @Input() multiple: boolean;\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() disabled: boolean;\n\n    @Input() dataKey: string\n    \n    @Input() optionLabel: string;\n    \n    @Output() onOptionClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    @ContentChild(TemplateRef) itemTemplate;\n    \n    value: any;\n        \n    _options: any[];\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    constructor(private cd: ChangeDetectorRef) {}\n    \n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        //NoOp\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.options) {\n            this._options = this.optionLabel ? ObjectUtils.generateSelectItems(simpleChange.options.currentValue, this.optionLabel) : simpleChange.options.currentValue;\n        }\n    }\n    \n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    onItemClick(event, option: SelectItem, index: number) {\n        if (this.disabled || option.disabled) {\n            return;\n        }\n                \n        if (this.multiple) {\n            let itemIndex = this.findItemIndex(option);\n            if (itemIndex != -1)\n                this.value = this.value.filter((val,i) => i!=itemIndex);\n            else\n                this.value = [...this.value||[], option.value];\n        }\n        else {\n            this.value = option.value;\n        }\n        \n        this.onOptionClick.emit({\n            originalEvent: event,\n            option: option,\n            index: index\n        });\n        \n        this.onModelChange(this.value);\n        \n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n    }\n    \n    onBlur(event) {\n        this.onModelTouched();\n    }\n    \n    isSelected(option: SelectItem) {\n        if (this.multiple)\n            return this.findItemIndex(option) != -1;\n        else\n            return ObjectUtils.equals(option.value, this.value, this.dataKey);\n    }\n    \n    findItemIndex(option: SelectItem) {\n        let index = -1;\n        if (this.value) {\n            for(let i = 0; i < this.value.length; i++) {\n                if (this.value[i] == option.value) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [SelectButton],\n    declarations: [SelectButton]\n})\nexport class SelectButtonModule { }\n"]}