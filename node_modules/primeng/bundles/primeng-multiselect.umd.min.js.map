{"version":3,"sources":["ng://primeng/multiselect/multiselect.ts"],"names":["MULTISELECT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MultiSelect","multi","MultiSelectItem","this","onClick","EventEmitter","onKeydown","prototype","onOptionClick","event","emit","originalEvent","option","onOptionKeydown","Component","args","selector","template","encapsulation","ViewEncapsulation","None","Input","Output","el","renderer","cd","scrollHeight","filter","displaySelectedLabel","maxSelectedLabels","selectedItemsLabel","showToggleAll","emptyFilterMessage","resetFilterOnHide","dropdownIcon","showHeader","autoZIndex","baseZIndex","filterBy","showTransitionOptions","hideTransitionOptions","filterMatchMode","tooltip","tooltipPosition","tooltipPositionStyle","autofocusFilter","onChange","onFocus","onBlur","onPanelShow","onPanelHide","onModelChange","onModelTouched","disabledSelectedOptions","Object","defineProperty","_defaultLabel","val","updateLabel","_placeholder","_options","opts","optionLabel","ObjectUtils","generateSelectItems","visibleOptions","filterValue","length","activateFilter","ngOnInit","ngAfterContentInit","_this","templates","forEach","item","getType","itemTemplate","selectedItemsTemplate","headerTemplate","footerTemplate","ngAfterViewInit","overlayVisible","show","ngAfterViewChecked","filtered","alignOverlay","writeValue","value","updateFilledState","setDisabledSelectedOptions","checkSelectionLimit","markForCheck","selectionLimit","maxSelectionLimitReached","filled","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","optionValue","selectionIndex","findSelectionIndex","i","__spread","itemValue","isSelected","index","equals","dataKey","toggleAll","isAllChecked","getVisibleOptions","push","trim","isAllVisibleOptionsChecked","optionCount","getEnabledOptionCount","disabledSelectedOptionCount","options","_b","__values","_c","next","done","count","opt","onOverlayAnimationStart","toState","overlay","element","appendOverlay","style","zIndex","String","DomHandler","zindex","bindDocumentClickListener","bindDocumentResizeListener","filterInputChild","nativeElement","preventModelTouched","focus","onOverlayHide","appendTo","document","body","appendChild","minWidth","getWidth","containerViewChild","restoreOverlayAppend","absolutePosition","relativePosition","hide","unbindDocumentClickListener","onFilter","close","preventDefault","stopPropagation","onMouseclick","input","readonly","target","isSameNode","accessibleViewChild","isOverlayClick","contains","isOutsideClicked","onInputFocus","onInputBlur","which","nextItem","findNextItem","parentElement","prevItem","findPrevItem","nextElementSibling","hasClass","children","isHidden","previousElementSibling","altKey","label","itemLabel","findLabelByValue","valuesAsString","pattern","test","replace","match","placeholder","defaultLabel","inputValue","searchFields","split","FilterUtils","filterLocale","isItemVisible","onHeaderCheckboxFocus","headerCheckboxFocus","onHeaderCheckboxBlur","documentClickListener","listen","documentResizeListener","onWindowResize","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","isAndroid","ngOnDestroy","ElementRef","Renderer2","ChangeDetectorRef","animations","trigger","transition","opacity","transform","animate","host","[class.p-inputwrapper-filled]","[class.p-inputwrapper-focus]","providers","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","ContentChild","Footer","Header","ContentChildren","PrimeTemplate","MultiSelectModule","NgModule","imports","CommonModule","SharedModule","ScrollingModule","TooltipModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy, Input, Output, Renderer2, EventEmitter,\n    forwardRef, ViewChild, ChangeDetectorRef, TemplateRef, ContentChildren, QueryList, ContentChild, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { SelectItem } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils } from 'primeng/utils';\nimport { SharedModule, PrimeTemplate, Footer, Header } from 'primeng/api';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { FilterUtils } from 'primeng/utils';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { RippleModule } from 'primeng/ripple';\n\nexport const MULTISELECT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MultiSelect),\n  multi: true\n};\n\n@Component({\n    selector: 'p-multiSelectItem',\n    template: `\n        <li class=\"p-multiselect-item\" (click)=\"onOptionClick($event)\" (keydown)=\"onOptionKeydown($event)\" [attr.aria-label]=\"option.label\"\n            [attr.tabindex]=\"option.disabled ? null : '0'\" [ngStyle]=\"{'height': itemSize + 'px'}\"\n            [ngClass]=\"{'p-highlight': selected, 'p-disabled': (option.disabled || (maxSelectionLimitReached && !selected))}\">\n            <div class=\"p-checkbox p-component\">\n                <div class=\"p-checkbox-box\" [ngClass]=\"{'p-highlight': selected}\">\n                    <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check': selected}\"></span>\n                </div>\n            </div>\n            <span *ngIf=\"!template\">{{option.label}}</span>\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: option}\"></ng-container>\n        </li>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class MultiSelectItem {\n\n    @Input() option: any;\n\n    @Input() selected: boolean;\n\n    @Input() disabled: boolean;\n\n    @Input() visible: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() template: TemplateRef<any>;\n\n    @Input() maxSelectionLimitReached: boolean;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onKeydown: EventEmitter<any> = new EventEmitter();\n\n    onOptionClick(event: Event) {\n        this.onClick.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n\n    onOptionKeydown(event: Event) {\n        this.onKeydown.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n}\n\n@Component({\n    selector: 'p-multiSelect',\n    template: `\n        <div #container [ngClass]=\"{'p-multiselect p-component':true,'p-multiselect-open':overlayVisible,'p-focus':focus,'p-disabled': disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\"\n            (click)=\"onMouseclick($event,in)\">\n            <div class=\"p-hidden-accessible\">\n                <input #in type=\"text\" readonly=\"readonly\" [attr.id]=\"inputId\" [attr.name]=\"name\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\"\n                       [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" (keydown)=\"onKeydown($event)\" aria-haspopup=\"listbox\" [attr.aria-expanded]=\"overlayVisible\"\n                       [attr.aria-labelledby]=\"ariaLabelledBy\" role=\"listbox\">\n            </div>\n            <div class=\"p-multiselect-label-container\" [pTooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" [positionStyle]=\"tooltipPositionStyle\" [tooltipStyleClass]=\"tooltipStyleClass\">\n                <div class=\"p-multiselect-label\" [ngClass]=\"{'p-placeholder': valuesAsString === (defaultLabel || placeholder), 'p-multiselect-label-empty': ((valuesAsString == null || valuesAsString.length === 0) && (placeholder == null || placeholder.length === 0))}\">\n                    <ng-container *ngIf=\"!selectedItemsTemplate\">{{valuesAsString || 'empty'}}</ng-container>\n                    <ng-container *ngTemplateOutlet=\"selectedItemsTemplate; context: {$implicit: value}\"></ng-container>\n                </div>\n            </div>\n            <div [ngClass]=\"{'p-multiselect-trigger':true}\">\n                <span class=\"p-multiselect-trigger-icon\" [ngClass]=\"dropdownIcon\"></span>\n            </div>\n            <div *ngIf=\"overlayVisible\" [ngClass]=\"['p-multiselect-panel p-component']\" [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\"\n                [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\" (keydown)=\"onKeydown($event)\">\n                <div class=\"p-multiselect-header\" *ngIf=\"showHeader\">\n                    <ng-content select=\"p-header\"></ng-content>\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                    <div class=\"p-checkbox p-component\" *ngIf=\"showToggleAll && !selectionLimit\">\n                        <div class=\"p-hidden-accessible\">\n                            <input type=\"checkbox\" readonly=\"readonly\" [checked]=\"isAllChecked()\" (focus)=\"onHeaderCheckboxFocus()\" (blur)=\"onHeaderCheckboxBlur()\" (keydown.space)=\"toggleAll($event)\">\n                        </div>\n                        <div class=\"p-checkbox-box\" role=\"checkbox\" [attr.aria-checked]=\"isAllChecked()\" [ngClass]=\"{'p-highlight':isAllChecked(), 'p-focus': headerCheckboxFocus}\" (click)=\"toggleAll($event)\">\n                            <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':isAllChecked()}\"></span>\n                        </div>\n                    </div>\n                    <div class=\"p-multiselect-filter-container\" *ngIf=\"filter\">\n                        <input #filterInput type=\"text\" role=\"textbox\" [value]=\"filterValue||''\" (input)=\"onFilter()\" class=\"p-multiselect-filter p-inputtext p-component\" [attr.placeholder]=\"filterPlaceHolder\" [attr.aria-label]=\"ariaFilterLabel\">\n                        <span class=\"p-multiselect-filter-icon pi pi-search\"></span>\n                    </div>\n                    <button class=\"p-multiselect-close p-link\" type=\"button\" (click)=\"close($event)\" pRipple>\n                        <span class=\"p-multiselect-close-icon pi pi-times\"></span>\n                    </button>\n                </div>\n                <div class=\"p-multiselect-items-wrapper\" [style.max-height]=\"virtualScroll ? 'auto' : (scrollHeight||'auto')\">\n                    <ul class=\"p-multiselect-items p-component\" role=\"listbox\" aria-multiselectable=\"true\">\n                        <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                            <ng-template ngFor let-option let-i=\"index\" [ngForOf]=\"visibleOptions\">\n                                <p-multiSelectItem [option]=\"option\" [selected]=\"isSelected(option.value)\" (onClick)=\"onOptionClick($event)\" (onKeydown)=\"onOptionKeydown($event)\"\n                                        [maxSelectionLimitReached]=\"maxSelectionLimitReached\" [visible]=\"isItemVisible(option)\" [template]=\"itemTemplate\"></p-multiSelectItem>\n                            </ng-template>\n                        </ng-container>\n                        <ng-template #virtualScrollList>\n                            <cdk-virtual-scroll-viewport #viewport [ngStyle]=\"{'height': scrollHeight}\" [itemSize]=\"itemSize\" *ngIf=\"virtualScroll && visibleOptions && visibleOptions.length\">\n                                <ng-container *cdkVirtualFor=\"let option of visibleOptions; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd\">\n                                    <p-multiSelectItem [option]=\"option\" [selected]=\"isSelected(option.value)\" (onClick)=\"onOptionClick($event)\" (onKeydown)=\"onOptionKeydown($event)\"\n                                        [maxSelectionLimitReached]=\"maxSelectionLimitReached\" [visible]=\"isItemVisible(option)\" [template]=\"itemTemplate\" [itemSize]=\"itemSize\"></p-multiSelectItem>\n                                </ng-container>\n                            </cdk-virtual-scroll-viewport>\n                        </ng-template>\n                        <li *ngIf=\"filter && visibleOptions && visibleOptions.length === 0\" class=\"p-multiselect-empty-message\">{{emptyFilterMessage}}</li>\n                    </ul>\n                </div>\n                <div class=\"p-multiselect-footer\" *ngIf=\"footerFacet || footerTemplate\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                    <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('{{showTransitionParams}}')\n              ]),\n              transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n              ])\n        ])\n    ],\n    host: {\n        '[class.p-inputwrapper-filled]': 'filled',\n        '[class.p-inputwrapper-focus]': 'focus'\n    },\n    providers: [MULTISELECT_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./multiselect.css']\n})\nexport class MultiSelect implements OnInit,AfterViewInit,AfterContentInit,AfterViewChecked,OnDestroy,ControlValueAccessor {\n\n    @Input() scrollHeight: string = '200px';\n\n    _defaultLabel: string;\n\n    @Input() set defaultLabel(val: string) {\n        this._defaultLabel = val;\n        this.updateLabel();\n    }\n\n    get defaultLabel(): string {\n        return this._defaultLabel;\n    }\n\n    _placeholder: string;\n\n    @Input() set placeholder(val: string) {\n        this._placeholder = val;\n        this.updateLabel();\n    }\n\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() panelStyle: any;\n\n    @Input() panelStyleClass: string;\n\n    @Input() inputId: string;\n\n    @Input() disabled: boolean;\n\n    @Input() readonly: boolean;\n\n    @Input() filter: boolean = true;\n\n    @Input() filterPlaceHolder: string;\n\n    @Input() filterLocale: string;\n\n    @Input() overlayVisible: boolean;\n\n    @Input() tabindex: number;\n\n    @Input() appendTo: any;\n\n    @Input() dataKey: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() displaySelectedLabel: boolean = true;\n\n    @Input() maxSelectedLabels: number = 3;\n\n    @Input() selectionLimit: number;\n\n    @Input() selectedItemsLabel: string = '{0} items selected';\n\n    @Input() showToggleAll: boolean = true;\n\n    @Input() emptyFilterMessage: string = 'No results found';\n\n    @Input() resetFilterOnHide: boolean = false;\n\n    @Input() dropdownIcon: string = 'pi pi-chevron-down';\n\n    @Input() optionLabel: string;\n\n    @Input() showHeader: boolean = true;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() filterBy: string = 'label';\n\n    @Input() virtualScroll: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    @Input() ariaFilterLabel: string;\n\n    @Input() filterMatchMode: string = \"contains\";\n\n    @Input() tooltip: string = '';\n\n    @Input() tooltipPosition: string = 'right';\n\n    @Input() tooltipPositionStyle: string = 'absolute';\n\n    @Input() tooltipStyleClass: string;\n\n    @Input() autofocusFilter: boolean = true;\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('filterInput') filterInputChild: ElementRef;\n\n    @ViewChild('in') accessibleViewChild: ElementRef;\n\n    @ContentChild(Footer) footerFacet;\n\n    @ContentChild(Header) headerFacet;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPanelShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPanelHide: EventEmitter<any> = new EventEmitter();\n\n    public value: any[];\n\n    public onModelChange: Function = () => {};\n\n    public onModelTouched: Function = () => {};\n\n    overlay: HTMLDivElement;\n\n    public valuesAsString: string;\n\n    public focus: boolean;\n\n    filled: boolean;\n\n    public documentClickListener: any;\n\n    public filterValue: string;\n\n    public visibleOptions: SelectItem[];\n\n    public disabledSelectedOptions: SelectItem[] = [];\n\n    public filtered: boolean;\n\n    public itemTemplate: TemplateRef<any>;\n\n    public headerTemplate: TemplateRef<any>;\n\n    public footerTemplate: TemplateRef<any>;\n\n    public selectedItemsTemplate: TemplateRef<any>;\n\n    public headerCheckboxFocus: boolean;\n\n    _options: any[];\n\n    maxSelectionLimitReached: boolean;\n\n    documentResizeListener: any;\n\n    preventModelTouched: boolean;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) {}\n\n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n        this.visibleOptions = opts;\n        this._options = opts;\n        this.updateLabel();\n\n        if (this.filterValue && this.filterValue.length) {\n            this.activateFilter();\n        }\n    }\n\n    ngOnInit() {\n        this.updateLabel();\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'selectedItems':\n                    this.selectedItemsTemplate = item.template;\n                break;\n                \n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.overlayVisible) {\n            this.show();\n        }\n    }\n\n    ngAfterViewChecked() {\n        if (this.filtered) {\n            this.alignOverlay();\n\n            this.filtered = false;\n        }\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.updateLabel();\n        this.updateFilledState();\n        this.setDisabledSelectedOptions();\n        this.checkSelectionLimit();\n\n        this.cd.markForCheck();\n    }\n\n    checkSelectionLimit() {\n        if (this.selectionLimit && (this.value && this.value.length === this.selectionLimit)) {\n            this.maxSelectionLimitReached = true;\n        }\n        else {\n            this.maxSelectionLimitReached = false;\n        }\n    }\n\n    updateFilledState() {\n        this.filled = (this.value && this.value.length > 0);\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n\n    onOptionClick(event) {\n        let option = event.option;\n        if (option.disabled) {\n            return;\n        }\n\n        const optionValue = option.value;\n        let selectionIndex = this.findSelectionIndex(optionValue);\n        if (selectionIndex != -1) {\n            this.value = this.value.filter((val,i) => i != selectionIndex);\n\n            if (this.selectionLimit) {\n                this.maxSelectionLimitReached = false;\n            }\n        }\n        else {\n            if (!this.selectionLimit || (!this.value || this.value.length < this.selectionLimit)) {\n                this.value = [...this.value || [], optionValue];\n            }\n\n            this.checkSelectionLimit();\n        }\n\n        this.onModelChange(this.value);\n        this.onChange.emit({originalEvent: event.originalEvent, value: this.value, itemValue: optionValue});\n        this.updateLabel();\n        this.updateFilledState();\n    }\n\n    isSelected(value) {\n        return this.findSelectionIndex(value) != -1;\n    }\n\n    findSelectionIndex(val: any): numberÂ {\n        let index = -1;\n\n        if (this.value) {\n            for (let i = 0; i < this.value.length; i++) {\n                if (ObjectUtils.equals(this.value[i], val, this.dataKey)) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    toggleAll(event: Event) {\n        if (this.isAllChecked()) {\n            if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n                let value = [];\n                value = [...this.disabledSelectedOptions];\n                this.value = value;\n            }\n            else {\n                this.value = [];\n            }\n        }\n        else {\n            let opts = this.getVisibleOptions();\n            if (opts) {\n                let value = [];\n                if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n                    value = [...this.disabledSelectedOptions];\n                }\n                for (let i = 0; i < opts.length; i++) {\n                    let option = opts[i];\n\n                    if (!option.disabled) {\n                        value.push(opts[i].value);\n                    }\n                }\n                this.value = value;\n            }\n        }\n\n        this.onModelChange(this.value);\n        this.onChange.emit({originalEvent: event, value: this.value});\n        this.updateFilledState();\n        this.updateLabel();\n    }\n\n    isAllChecked() {\n        if (this.filterValue && this.filterValue.trim().length) {\n            return this.value && this.visibleOptions && this.visibleOptions.length && this.isAllVisibleOptionsChecked();\n        }\n        else {\n            let optionCount = this.getEnabledOptionCount();\n            let disabledSelectedOptionCount = this.disabledSelectedOptions.length;\n\n            return this.value && this.options && (this.value.length > 0 && this.value.length == optionCount + disabledSelectedOptionCount);\n        }\n    }\n\n    isAllVisibleOptionsChecked() {\n        if (!this.visibleOptions || this.visibleOptions.length === 0) {\n            return false;\n        }\n        else {\n            for (let option of this.visibleOptions) {\n                if (!this.isSelected(option.value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    getEnabledOptionCount(): number {\n        if (this.options) {\n            let count = 0;\n            for (let opt of this.options) {\n                if (!opt.disabled) {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    setDisabledSelectedOptions(){\n        if (this.options) {\n            this.disabledSelectedOptions = [];\n            if (this.value) {\n                for (let opt of this.options) {\n                    if (opt.disabled && this.isSelected(opt.value)) {\n                        this.disabledSelectedOptions.push(opt.value);\n                    }\n                }\n            }\n        }\n    }\n\n    show() {\n        if (!this.overlayVisible){\n            this.overlayVisible = true;\n        }\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                this.appendOverlay();\n                if (this.autoZIndex) {\n                    this.overlay.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n\n                if (this.filterInputChild && this.filterInputChild.nativeElement) {\n                    this.preventModelTouched = true;\n\n                    if (this.autofocusFilter) {\n                        this.filterInputChild.nativeElement.focus();\n                    }\n                }\n\n                this.onPanelShow.emit();\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n\n            if (!this.overlay.style.minWidth) {\n                this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n            }\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n\n    alignOverlay() {\n        if (this.overlay) {\n            if (this.appendTo)\n                DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);\n            else\n                DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n        }\n    }\n\n    hide() {\n        this.overlayVisible = false;\n        this.unbindDocumentClickListener();\n        if (this.resetFilterOnHide){\n            this.filterInputChild.nativeElement.value = '';\n            this.onFilter();\n        }\n        this.onPanelHide.emit();\n        this.cd.markForCheck();\n    }\n\n    close(event) {\n        this.hide();\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    onMouseclick(event,input) {\n        if (this.disabled || this.readonly || event.target.isSameNode(this.accessibleViewChild.nativeElement)) {\n            return;\n        }\n\n        this.onClick.emit(event);\n\n        if (!this.isOverlayClick(event)) {\n            if (this.overlayVisible) {\n                this.hide();\n            }\n            else {\n                input.focus();\n                this.show();\n            }\n        }\n    }\n\n    isOverlayClick(event) {\n        return (this.overlay && this.overlay.contains(<Node> event.target));\n    }\n\n    isOutsideClicked(event: Event): boolean {\n        return !(this.el.nativeElement.isSameNode(event.target) || this.el.nativeElement.contains(event.target) || this.isOverlayClick(event));\n    }\n\n    onInputFocus(event) {\n        this.focus = true;\n        this.onFocus.emit({originalEvent: event});\n    }\n\n    onInputBlur(event) {\n        this.focus = false;\n        this.onBlur.emit({originalEvent: event});\n\n        if (!this.preventModelTouched) {\n            this.onModelTouched();\n        }\n        this.preventModelTouched = false;\n    }\n\n    onOptionKeydown(event) {\n        if (this.readonly) {\n            return;\n        }\n\n        switch(event.originalEvent.which) {\n\n            //down\n            case 40:\n                var nextItem = this.findNextItem(event.originalEvent.target.parentElement);\n                if (nextItem) {\n                    nextItem.focus();\n                }\n\n                event.originalEvent.preventDefault();\n            break;\n\n            //up\n            case 38:\n                var prevItem = this.findPrevItem(event.originalEvent.target.parentElement);\n                if (prevItem) {\n                    prevItem.focus();\n                }\n\n                event.originalEvent.preventDefault();\n            break;\n\n            //enter\n            case 13:\n                this.onOptionClick(event);\n                event.originalEvent.preventDefault();\n            break;\n        }\n    }\n\n    findNextItem(item) {\n        let nextItem = item.nextElementSibling;\n\n        if (nextItem)\n            return DomHandler.hasClass(nextItem.children[0], 'p-disabled') || DomHandler.isHidden(nextItem.children[0]) ? this.findNextItem(nextItem) : nextItem.children[0];\n        else\n            return null;\n    }\n\n    findPrevItem(item) {\n        let prevItem = item.previousElementSibling;\n\n        if (prevItem)\n            return DomHandler.hasClass(prevItem.children[0], 'p-disabled') || DomHandler.isHidden(prevItem.children[0]) ? this.findPrevItem(prevItem) : prevItem.children[0];\n        else\n            return null;\n    }\n\n    onKeydown(event: KeyboardEvent){\n        switch(event.which) {\n            //down\n            case 40:\n                if (!this.overlayVisible && event.altKey) {\n                    this.show();\n                    event.preventDefault();\n                }\n            break;\n\n            //space\n            case 32:\n                if (!this.overlayVisible){\n                    this.show();\n                    event.preventDefault();\n                }\n                break;\n\n            //escape\n            case 27:\n                this.hide();\n            break;\n        }\n    }\n\n    updateLabel() {\n        if (this.value && this.options && this.value.length && this.displaySelectedLabel) {\n            let label = '';\n            for (let i = 0; i < this.value.length; i++) {\n                let itemLabel = this.findLabelByValue(this.value[i]);\n                if (itemLabel) {\n                    if (label.length > 0) {\n                        label = label + ', ';\n                    }\n                    label = label + itemLabel;\n                }\n            }\n\n            if (this.value.length <= this.maxSelectedLabels) {\n                this.valuesAsString = label;\n            }\n            else {\n                let pattern = /{(.*?)}/;\n                if (pattern.test(this.selectedItemsLabel)) {\n                    this.valuesAsString = this.selectedItemsLabel.replace(this.selectedItemsLabel.match(pattern)[0], this.value.length + '');\n                } else {\n                    this.valuesAsString = this.selectedItemsLabel;\n                }\n            }\n        }\n        else {\n            this.valuesAsString = this.placeholder || this.defaultLabel;\n        }\n    }\n\n    findLabelByValue(val: any): string {\n        let label = null;\n        for (let i = 0; i < this.options.length; i++) {\n            let option = this.options[i];\n            if (val == null && option.value == null || ObjectUtils.equals(val, option.value, this.dataKey)) {\n                label = option.label;\n                break;\n            }\n        }\n        return label;\n    }\n\n    onFilter() {\n        let inputValue = this.filterInputChild.nativeElement.value;\n        if (inputValue && inputValue.length) {\n            this.filterValue = inputValue;\n            this.activateFilter();\n        }\n        else {\n            this.filterValue = null;\n            this.visibleOptions = this.options;\n            this.filtered = false;\n        }\n    }\n\n    activateFilter() {\n        if (this.options && this.options.length) {\n            let searchFields: string[] = this.filterBy.split(',');\n            this.visibleOptions = FilterUtils.filter(this.options, searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n            this.filtered = true;\n        }\n    }\n\n    isItemVisible(option: SelectItem): boolean {\n        if (this.filterValue && this.filterValue.trim().length) {\n            for (let i = 0; i < this.visibleOptions.length; i++) {\n                if (this.visibleOptions[i].value == option.value) {\n                    return true;\n                }\n            }\n        }\n        else {\n            return true;\n        }\n    }\n\n    getVisibleOptions(): SelectItem[] {\n        return this.visibleOptions || this.options;\n    }\n\n    onHeaderCheckboxFocus() {\n        this.headerCheckboxFocus = true;\n    }\n\n    onHeaderCheckboxBlur() {\n        this.headerCheckboxFocus = false;\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', (event) => {\n                if (this.isOutsideClicked(event)) {\n                    this.hide();\n                }\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onWindowResize() {\n        if (!DomHandler.isAndroid()) {\n            this.hide();\n        }\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.overlay = null;\n        this.onModelTouched();\n    }\n\n    ngOnDestroy() {\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,SharedModule,ScrollingModule,TooltipModule,RippleModule],\n    exports: [MultiSelect,SharedModule,ScrollingModule],\n    declarations: [MultiSelect,MultiSelectItem]\n})\nexport class MultiSelectModule { }\n"]}