{"version":3,"sources":["ng://primeng/organizationchart/organizationchart.ts"],"names":["OrganizationChartNode","chart","cd","_this","this","subscription","selectionSource$","subscribe","markForCheck","Object","defineProperty","prototype","node","leaf","children","length","onNodeClick","event","toggleNode","expanded","onNodeExpand","emit","originalEvent","onNodeCollapse","preventDefault","isSelected","ngOnDestroy","unsubscribe","Inject","args","forwardRef","OrganizationChart","ChangeDetectorRef","Component","selector","template","animations","trigger","state","style","opacity","transition","animate","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","Input","el","preserveSpace","selectionChange","EventEmitter","onNodeSelect","onNodeUnselect","selectionSource","Subject","asObservable","_selection","val","initialized","next","value","ngAfterContentInit","templates","templateMap","forEach","item","getType","getTemplateForNode","type","eventTarget","target","className","indexOf","selectionMode","selectable","index_1","findIndexInSelection","selected","selection","filter","i","__spread","index","ElementRef","Output","ContentChildren","PrimeTemplate","OrganizationChartModule","NgModule","imports","CommonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,Input,Output,AfterContentInit,EventEmitter,TemplateRef,\n        Inject,forwardRef,ContentChildren,QueryList,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule} from 'primeng/api';\nimport {TreeNode} from 'primeng/api';\nimport {PrimeTemplate} from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\n\n@Component({\n    selector: '[pOrganizationChartNode]',\n    template: `\n        <tbody *ngIf=\"node\">\n            <tr>\n                <td [attr.colspan]=\"colspan\">\n                    <div [class]=\"node.styleClass\" [ngClass]=\"{'p-organizationchart-node-content': true, 'p-organizationchart-selectable-node': chart.selectionMode && node.selectable !== false,'p-highlight':isSelected()}\"\n                        (click)=\"onNodeClick($event,node)\">\n                        <div *ngIf=\"!chart.getTemplateForNode(node)\">{{node.label}}</div>\n                        <div *ngIf=\"chart.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"chart.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                        </div>\n                        <a *ngIf=\"!leaf\" tabindex=\"0\" class=\"p-node-toggler\" (click)=\"toggleNode($event, node)\" (keydown.enter)=\"toggleNode($event, node)\">\n                            <i class=\"p-node-toggler-icon pi\" [ngClass]=\"{'pi-chevron-down': node.expanded, 'pi-chevron-up': !node.expanded}\"></i>\n                        </a>\n                    </div>\n                </td>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-lines\" [@childState]=\"'in'\">\n                <td [attr.colspan]=\"colspan\">\n                    <div class=\"p-organizationchart-line-down\"></div>\n                </td>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-lines\" [@childState]=\"'in'\">\n                <ng-container *ngIf=\"node.children && node.children.length === 1\">\n                    <td [attr.colspan]=\"colspan\">\n                        <div class=\"p-organizationchart-line-down\"></div>\n                    </td>\n                </ng-container>\n                <ng-container *ngIf=\"node.children && node.children.length > 1\">\n                    <ng-template ngFor let-child [ngForOf]=\"node.children\" let-first=\"first\" let-last=\"last\">\n                        <td class=\"p-organizationchart-line-left\" [ngClass]=\"{'p-organizationchart-line-top':!first}\">&nbsp;</td>\n                        <td class=\"p-organizationchart-line-right\" [ngClass]=\"{'p-organizationchart-line-top':!last}\">&nbsp;</td>\n                    </ng-template>\n                </ng-container>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-nodes\" [@childState]=\"'in'\">\n                <td *ngFor=\"let child of node.children\" colspan=\"2\">\n                    <table class=\"p-organizationchart-table\" pOrganizationChartNode [node]=\"child\"></table>\n                </td>\n            </tr>\n        </tbody>\n    `,\n    animations: [\n        trigger('childState', [\n            state('in', style({opacity: 1})),\n           transition('void => *', [\n             style({opacity: 0}),\n             animate(150)\n           ]),\n           transition('* => void', [\n             animate(150, style({opacity:0}))\n           ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./organizationchart.css']\n})\nexport class OrganizationChartNode implements OnDestroy{\n\n    @Input() node: TreeNode;\n        \n    @Input() root: boolean;\n    \n    @Input() first: boolean;\n    \n    @Input() last: boolean;\n\n    chart: OrganizationChart;\n\n    subscription: Subscription;\n        \n    constructor(@Inject(forwardRef(() => OrganizationChart)) chart, public cd: ChangeDetectorRef) {\n        this.chart = chart as OrganizationChart;\n        this.subscription = this.chart.selectionSource$.subscribe(() =>{\n            this.cd.markForCheck();\n        })\n    }\n                \n    get leaf(): boolean {\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\n    }\n    \n    get colspan() {\n        return (this.node.children && this.node.children.length) ? this.node.children.length * 2: null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        this.chart.onNodeClick(event, node)\n    }\n    \n    toggleNode(event: Event, node: TreeNode) {\n        node.expanded = !node.expanded;\n        if (node.expanded)\n            this.chart.onNodeExpand.emit({originalEvent: event, node: this.node});\n        else\n            this.chart.onNodeCollapse.emit({originalEvent: event, node: this.node});\n            \n        event.preventDefault();\n    }\n    \n    isSelected() {\n        return this.chart.isSelected(this.node);\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n\n@Component({\n    selector: 'p-organizationChart',\n    template: `\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"{'p-organizationchart p-component': true, 'p-organizationchart-preservespace': preserveSpace}\">\n            <table class=\"p-organizationchart-table\" pOrganizationChartNode [node]=\"root\" *ngIf=\"root\"></table>\n        </div>\n    `,\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OrganizationChart implements AfterContentInit {\n            \n    @Input() value: TreeNode[];            \n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() selectionMode: string;\n    \n    @Input() preserveSpace: boolean = true;\n    \n    @Input()  get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val:any) {\n        this._selection = val;\n        \n        if (this.initialized)\n            this.selectionSource.next();\n    }\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public templateMap: any;\n\n    private selectionSource = new Subject<any>();\n\n    _selection: any;\n\n    initialized: boolean;\n\n    selectionSource$ = this.selectionSource.asObservable();\n    \n    constructor(public el: ElementRef, public cd:ChangeDetectorRef) {}\n    \n    get root(): TreeNode {\n        return this.value && this.value.length ? this.value[0] : null;\n    }\n    \n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this.templateMap = {};\n        }\n        \n        this.templates.forEach((item) => {\n            this.templateMap[item.getType()] = item.template;\n        });\n\n        this.initialized = true;\n    }\n    \n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\n        if (this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n        \n        if (eventTarget.className && (eventTarget.className.indexOf('p-node-toggler') !== -1 ||Â eventTarget.className.indexOf('p-node-toggler-icon') !== -1)) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n            \n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n            \n            if (this.selectionMode === 'single') {\n                if (selected) {\n                    this.selection = null;\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = node;\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else if (this.selectionMode === 'multiple') {\n                if (selected) {\n                    this.selection = this.selection.filter((val,i) => i!=index);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = [...this.selection||[],node];\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            \n            this.selectionChange.emit(this.selection);\n            this.selectionSource.next();\n        }\n    }\n    \n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if (this.selectionMode && this.selection) {\n            if (this.selectionMode === 'single') {\n                index = (this.selection == node) ? 0 : - 1;\n            }\n            else if (this.selectionMode === 'multiple') {\n                for(let i = 0; i  < this.selection.length; i++) {\n                    if (this.selection[i] == node) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n    \n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;         \n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [OrganizationChart,SharedModule],\n    declarations: [OrganizationChart,OrganizationChartNode]\n})\nexport class OrganizationChartModule { }"]}