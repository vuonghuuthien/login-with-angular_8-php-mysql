{"version":3,"sources":["ng://primeng/table/table.ts"],"names":["TableService","this","sortSource","Subject","selectionSource","contextMenuSource","valueSource","totalRecordsSource","columnsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","valueSource$","totalRecordsSource$","columnsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","data","onValueChange","value","onTotalRecordsChange","onColumnsChange","columns","Injectable","Table","el","zone","tableService","cd","pageLinks","alwaysShowPaginator","paginatorPosition","paginatorDropdownScrollHeight","currentPageReportTemplate","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","rowTrackBy","index","item","lazy","lazyLoadOnInit","compareSelectionBy","csvSeparator","exportFilename","filters","filterDelay","expandedRowKeys","editingRowKeys","rowExpandMode","virtualScrollDelay","virtualRowHeight","columnResizeMode","loadingIcon","showLoader","stateStorage","editMode","onRowSelect","onRowUnselect","onPage","onFilter","onLazyLoad","onRowExpand","onRowCollapse","onContextMenuSelect","onColResize","onColReorder","onRowReorder","onEditInit","onEditComplete","onEditCancel","onHeaderCheckboxToggle","sortFunction","firstChange","rowsChange","onStateSave","onStateRestore","_value","_totalRecords","_first","selectionKeys","_sortOrder","ngOnInit","virtualScroll","emit","createLazyLoadMetadata","restoringFilter","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","expandedRowTemplate","frozenRowsTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","ngAfterViewInit","isStateful","resizableColumns","restoreColumnWidths","clearCache","scrollable","scrollableViewChild","scrollableFrozenViewChild","ngOnChanges","simpleChange","stateRestored","restoreState","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","_columns","reorderableColumns","columnOrderStateRestored","restoreColumnOrder","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","cols","_rows","dataKey","Array","isArray","_b","__values","_c","done","String","ObjectUtils","resolveFieldData","onPageChange","event","first","rows","saveState","anchorRowIndex","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","push","restoringSort","customSort","mode","data1","data2","value1","value2","result","localeCompare","multisortField","multisortmeta","i","isSorted","sorted","handleRowClick","target","targetNode","nodeName","parentNode","parentElement","DomHandler","hasClass","selectionMode","isMultipleSelectionMode","shiftKey","clearSelection","rangeRowIndex","clearSelectionRange","rowIndex","selectRange","rowData","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","__spread","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","rangeStart","rangeEnd","paginator","rangeRowData","filteredValue","this_1","selectionIndex","undefined","equals","toggleRowWithRadio","toggleRowWithCheckbox","selectionIndex_3","toggleRowsWithCheckbox","check","slice","checked","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","localMatch","globalMatch","localFiltered","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","dataFieldValue","filterConstraint","FilterUtils","filterLocale","j","globalFilterField","markForCheck","empty","globalFilter","reset","exportCSV","options","csv","selectionOnly","column","exportable","header","record","i_1","cellData","exportFunction","replace","blob","Blob","window","navigator","msSaveOrOpenBlob","link","document","createElement","style","display","body","appendChild","download","setAttribute","URL","createObjectURL","click","open","encodeURI","removeChild","scrollToVirtualIndex","scrollTo","top","updateEditingCell","cell","editingCell","editingCellData","editingCellField","editingCellRowIndex","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","removeClass","unbindDocumentEditListener","addEventListener","removeEventListener","initRowEdit","saveRowEdit","rowElement","cancelRowEdit","toggleRow","preventDefault","isRowExpanded","isRowEditing","onColumnResizeBegin","containerLeft","getOffset","containerViewChild","nativeElement","left","lastResizerHelperX","pageX","scrollLeft","onColumnResize","addClass","resizeHelperViewChild","height","offsetHeight","onColumnResizeEnd","delta","offsetLeft","columnWidth","offsetWidth","minWidth","parseInt","newColumnWidth","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","setScrollableItemsWidthOnExpandResize","tableViewChild","containerWidth","element","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","parent_1","colGroup","children","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","containerOffset","dropHeaderOffset","dragIndex","indexWithinGroup","dropIndex","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","allowDrop","reorderArray","runOutsideAngular","draggable","onRowDragStart","rowDragging","draggedRowIndex","onRowDragOver","rowY","getWindowScrollTop","pageY","rowMidY","getOuterHeight","prevRowElement","previousElementSibling","droppedRowIndex","onRowDragLeave","onRowDragEnd","onRowDrop","isEmpty","getBlockableElement","getStorage","localStorage","sessionStorage","stateKey","storage","state","saveColumnWidths","saveColumnOrder","keys","setItem","JSON","stringify","clearState","removeItem","stateString","getItem","state_1","parse","columnWidthsState","columnWidths","tableWidthState","tableWidth","Promise","resolve","then","widths","map","getOuterWidth","join","widths_1","split","headerCols","bodyCols","columnOrder_1","key","columnOrder","reorderedColumns_1","findColumnByKey","ngOnDestroy","ElementRef","NgZone","ChangeDetectorRef","Component","args","selector","providers","changeDetection","ChangeDetectionStrategy","Default","encapsulation","ViewEncapsulation","None","Input","Output","ViewChild","ContentChildren","PrimeTemplate","TableBody","dt","ScrollableView","loadedPages","subscription","subscribe","alignScrollBar","_scrollHeight","includes","console","log","ngAfterViewChecked","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenColumns","frozenView","frozenSiblingBody","bindEvents","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","virtualScrollBody","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","scrollHeaderBoxViewChild","marginLeft","scrollFooterBoxViewChild","scrollTop","onScrollIndexChange","createPageRange","floor","page","loadPage","range","getPageCount","dataToRender","dataLength","scrollToIndex","hasVerticalOverflow","getDataLength","getViewportSize","scrollTableViewChild","scrollBarWidth","paddingRight","unsubscribe","CdkVirtualScrollViewport","SortableColumn","isEnabled","updateSortState","onClick","onEnterKey","pSortableColumnDisabled","Directive","host","[class.p-sortable-column]","[class.p-highlight]","[attr.tabindex]","[attr.role]","[attr.aria-sort]","HostListener","SortIcon","OnPush","SelectableRow","onTouchEnd","onArrowDownKeyDown","row","currentTarget","nextRow","findNextSelectableRow","focus","onArrowUpKeyDown","prevRow","findPrevSelectableRow","onEnterKeyDown","pSelectableRowDisabled","[class.p-selectable-row]","SelectableRowDblClick","[class.p-datatable-selectable-row]","ContextMenuRow","pContextMenuRowDisabled","[class.p-highlight-contextmenu]","RowToggler","pRowTogglerDisabled","ResizableColumn","resizer","className","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","which","pResizableColumnDisabled","ReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","pReorderableColumnDisabled","EditableColumn","closeEditingCell","openCell","focusCellSelector","pFocusCellSelector","focusableElement","completed","onEscapeKeyDown","onShiftKeyDown","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","firstElementChild","pEditableColumnDisabled","EditableRow","pEditableRowDisabled","InitEditableRow","editableRow","SaveEditableRow","CancelEditableRow","CellEditor","editableColumn","inputTemplate","outputTemplate","decorators","Optional","TableRadioButton","disabled","onFocus","boxViewChild","onBlur","TableCheckbox","TableHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","isDisabled","isAllFilteredValuesChecked","ReorderableRowHandle","ReorderableRow","droppable","dragEndListener","onDragEnd","pReorderableRowDisabled","TableModule","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, HostListener, OnInit, OnDestroy, AfterViewInit, AfterViewChecked, Directive, Optional, AfterContentInit,\n    Input, Output, EventEmitter, ElementRef, ContentChildren, TemplateRef, QueryList, ViewChild, NgZone, ChangeDetectorRef, OnChanges, SimpleChanges, ChangeDetectionStrategy, Query, ViewEncapsulation} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils } from 'primeng/utils';\nimport { SortMeta } from 'primeng/api';\nimport { TableState } from 'primeng/api';\nimport { FilterMetadata } from 'primeng/api';\nimport { Injectable } from '@angular/core';\nimport { BlockableUI } from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { FilterUtils } from 'primeng/utils';\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\n\n@Injectable()\nexport class TableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private valueSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n    private columnsSource = new Subject();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    valueSource$ = this.valueSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    columnsSource$ = this.columnsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(data: any) {\n        this.contextMenuSource.next(data);\n    }\n\n    onValueChange(value: any) {\n        this.valueSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n\n    onColumnsChange(columns: any[]) {\n        this.columnsSource.next(columns);\n    }\n}\n\n@Component({\n    selector: 'p-table',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n            [ngClass]=\"{'p-datatable p-component': true, \n                'p-datatable-hoverable-rows': (rowHover||selectionMode),\n                'p-datatable-auto-layout': autoLayout,\n                'p-datatable-resizable': resizableColumns,\n                'p-datatable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-datatable-scrollable': scrollable,\n                'p-datatable-flex-scrollable': (scrollable && scrollHeight === 'flex'),\n                'p-datatable-responsive': responsive}\">\n            <div class=\"p-datatable-loading-overlay p-component-overlay\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'p-datatable-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-datatable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n\n            <div class=\"p-datatable-wrapper\" *ngIf=\"!scrollable\">\n                <table role=\"grid\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-datatable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-datatable-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot *ngIf=\"footerTemplate\" class=\"p-datatable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-datatable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-datatable-scrollable-view p-datatable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [pScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-datatable-scrollable-view\" #scrollableView [pScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n\n            <div *ngIf=\"summaryTemplate\" class=\"p-datatable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-datatable-reorder-indicator-up\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-datatable-reorder-indicator-down\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TableService],\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./table.css']\n})\nexport class Table implements OnInit, AfterViewInit, AfterContentInit, BlockableUI, OnChanges {\n\n    @Input() frozenColumns: any[];\n\n    @Input() frozenValue: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Input() paginator: boolean;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() paginatorDropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n\n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() csvSeparator: string = ',';\n\n    @Input() exportFilename: string = 'download';\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterLocale: string;\n\n    @Input() expandedRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() editingRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() rowExpandMode: string = 'multiple';\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() frozenWidth: string;\n\n    @Input() responsive: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() rowHover: boolean;\n\n    @Input() customSort: boolean;\n\n    @Input() autoLayout: boolean;\n\n    @Input() exportFunction;\n\n    @Input() stateKey: string;\n\n    @Input() stateStorage: string = 'session';\n\n    @Input() editMode: string = 'cell';\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Output() onRowSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() firstChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() rowsChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() onStateSave: EventEmitter<any> = new EventEmitter();\n\n    @Output() onStateRestore: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ViewChild('scrollableView') scrollableViewChild;\n\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: any[] = [];\n\n    _columns: any[];\n\n    _totalRecords: number = 0;\n\n    _first: number = 0;\n\n    _rows: number;\n\n    filteredValue: any[];\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    frozenRowsTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    expandedRowTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    selectionKeys: any = {};\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    draggedRowIndex: number;\n\n    droppedRowIndex: number;\n\n    rowDragging: boolean;\n\n    dropPosition: number;\n\n    editingCell: Element;\n\n    editingCellData: any;\n\n    editingCellField: any;\n\n    editingCellRowIndex: number;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    anchorRowIndex: number;\n\n    rangeRowIndex: number;\n\n    filterTimeout: any;\n\n    initialized: boolean;\n\n    rowTouched: boolean;\n\n    restoringSort: boolean;\n\n    restoringFilter: boolean;\n\n    stateRestored: boolean;\n\n    columnOrderStateRestored: boolean;\n\n    columnWidthsState: string;\n\n    tableWidthState: string;\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TableService, public cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            if (!this.virtualScroll) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            \n            if (this.restoringFilter) {\n                this.restoringFilter = false;\n            }\n        }\n\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'rowexpansion':\n                    this.expandedRowTemplate = item.template;\n                break;\n\n                case 'frozenrows':\n                    this.frozenRowsTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.isStateful() && this.resizableColumns) {\n            this.restoreColumnWidths();\n        }\n    }\n\n    clearCache() {\n        if (this.scrollable) {\n            if (this.scrollableViewChild) {\n                this.scrollableViewChild.clearCache();\n            }\n\n            if (this.scrollableFrozenViewChild) {\n                this.scrollableViewChild.clearCache();\n            }\n        }\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            if (this.isStateful() && !this.stateRestored) {\n                this.restoreState();\n            }\n\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.clearCache();\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            this.tableService.onValueChange(simpleChange.value.currentValue);\n        }\n\n        if (simpleChange.columns) {\n            this._columns = simpleChange.columns.currentValue;\n            this.tableService.onColumnsChange(simpleChange.columns.currentValue);\n\n            if (this._columns && this.isStateful() && this.reorderableColumns && !this.columnOrderStateRestored ) {\n                this.restoreColumnOrder();\n            }\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    @Input() get columns(): any[] {\n        return this._columns;\n    }\n    set columns(cols: any[]) {\n        this._columns = cols;\n    }\n\n    @Input() get first(): number {\n        return this._first;\n    }\n    set first(val: number) {\n        this._first = val;\n    }\n\n    @Input() get rows(): number {\n        return this._rows;\n    }\n    set rows(val: number) {\n        this._rows = val;\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let data of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n\n        this.firstChange.emit(this.first);\n        this.rowsChange.emit(this.rows);\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n\n            if (this.resetPageOnSort) {\n                this._first = 0;\n                this.firstChange.emit(this._first);\n\n                if (this.scrollable) {\n                    this.resetScrollTop();\n                }\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n\n                    if (this.resetPageOnSort) {\n                        this._first = 0;\n                        this.firstChange.emit(this._first);\n                        \n                        if (this.scrollable) {\n                            this.resetScrollTop();\n                        }\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n\n                    if (this.resetPageOnSort) {\n                        this._first = 0;\n                        this.firstChange.emit(this._first);\n                    }\n                }\n                this._multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n\n            this.sortMultiple();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.restoringSort) {\n                this.restoringSort = false;\n            }\n\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        field: this.sortField,\n                        order: this.sortOrder\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\n                        let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\n                        let result = null;\n\n                        if (value1 == null && value2 != null)\n                            result = -1;\n                        else if (value1 != null && value2 == null)\n                            result = 1;\n                        else if (value1 == null && value2 == null)\n                            result = 0;\n                        else if (typeof value1 === 'string' && typeof value2 === 'string')\n                            result = value1.localeCompare(value2);\n                        else\n                            result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                        return (this.sortOrder * result);\n                    });\n                }\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        multiSortMeta: this.multiSortMeta\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        return this.multisortField(data1, data2, this.multiSortMeta, 0);\n                    });\n                }\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n\n    multisortField(data1, data2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        else if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta)Â {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field)Â {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    handleRowClick(event) {\n        let target = (<HTMLElement> event.originalEvent.target);\n        let targetNode = target.nodeName;\n        let parentNode = target.parentElement && target.parentElement.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' ||\n            parentNode == 'INPUT' || parentNode == 'BUTTON' || parentNode == 'A' ||\n            (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex != null) {\n                DomHandler.clearSelection();\n                if (this.rangeRowIndex != null) {\n                    this.clearSelectionRange(event.originalEvent);\n                }\n\n                this.rangeRowIndex = event.rowIndex;\n                this.selectRange(event.originalEvent, event.rowIndex);\n            }\n            else {\n                let rowData = event.rowData;\n                let selected = this.isSelected(rowData);\n                let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n                this.anchorRowIndex = event.rowIndex;\n                this.rangeRowIndex = event.rowIndex;\n\n                if (metaSelection) {\n                    let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n\n                        this.onRowUnselect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row'});\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = rowData;\n                            this.selectionChange.emit(rowData);\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            if (metaKey) {\n                                this._selection = this.selection||[];\n                            }\n                            else {\n                                this._selection = [];\n                                this.selectionKeys = {};\n                            }\n\n                            this._selection = [...this.selection,rowData];\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n\n                        this.onRowSelect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex});\n                    }\n                }\n                else {\n                    if (this.selectionMode === 'single') {\n                        if (selected) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                        }\n                        else {\n                            this._selection = rowData;\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                    else if (this.selectionMode === 'multiple') {\n                        if (selected) {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        else {\n                            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const rowData = event.rowData;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = rowData;\n                this.contextMenuSelectionChange.emit(rowData);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, data: rowData, index: event.rowIndex});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(rowData);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(rowData);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = rowData;\n                        this.selectionChange.emit(rowData);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [rowData];\n                        this.selectionChange.emit(this.selection);\n                    }\n\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event, data: rowData, index: event.rowIndex});\n            }\n        }\n    }\n\n    selectRange(event: MouseEvent, rowIndex: number) {\n        let rangeStart, rangeEnd;\n\n        if (this.anchorRowIndex > rowIndex) {\n            rangeStart = rowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else if (this.anchorRowIndex < rowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = rowIndex;\n        }\n        else {\n            rangeStart = rowIndex;\n            rangeEnd = rowIndex;\n        }\n\n        if (this.lazy && this.paginator) {\n            rangeStart -= this.first;\n            rangeEnd -= this.first;\n        }\n\n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.filteredValue ? this.filteredValue[i] : this.value[i];\n            if (!this.isSelected(rangeRowData)) {\n                this._selection = [...this.selection, rangeRowData];\n                let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n                this.onRowSelect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\n            }\n        }\n\n        this.selectionChange.emit(this.selection);\n    }\n\n    clearSelectionRange(event: MouseEvent) {\n        let rangeStart, rangeEnd;\n\n        if (this.rangeRowIndex > this.anchorRowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        else if (this.rangeRowIndex < this.anchorRowIndex) {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n\n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.value[i];\n            let selectionIndex = this.findIndexInSelection(rangeRowData);\n            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n            let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n            this.onRowUnselect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\n        }\n    }\n\n    isSelected(rowData) {\n        if (rowData && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(rowData) > -1;\n                else\n                    return this.equals(rowData, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(rowData: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(rowData, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    toggleRowWithRadio(event: any, rowData:any) {\n        this.preventSelectionSetterPropagation = true;\n\n        if (this.selection != rowData) {\n            this._selection = rowData;\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n\n            if (this.dataKey) {\n                this.selectionKeys = {};\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] = 1;\n            }\n        }\n        else {\n            this._selection = null;\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowWithCheckbox(event, rowData: any) {\n        this.selection = this.selection||[];\n        let selected = this.isSelected(rowData);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n        this.preventSelectionSetterPropagation = true;\n\n        if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowData);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        else {\n            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowsWithCheckbox(event: Event, check: boolean) {\n        this._selection = check ? this.filteredValue ? this.filteredValue.slice(): this.value.slice() : [];\n        this.preventSelectionSetterPropagation = true;\n        this.updateSelectionKeys();\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    equals(data1, data2) {\n        return this.compareSelectionBy === 'equals' ? (data1 === data2) : ObjectUtils.equals(data1, data2, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n\n        this.anchorRowIndex = null;\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (!this.restoringFilter) {\n            this.first = 0;\n            this.firstChange.emit(this.first);\n        }\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredValue = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n\n                this.filteredValue = [];\n\n                for (let i = 0; i < this.value.length; i++) {\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let localFiltered = false;\n\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            localFiltered = true;\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let dataFieldValue = ObjectUtils.resolveFieldData(this.value[i], filterField);\n                            let filterConstraint = FilterUtils[filterMatchMode];\n\n                            if (!filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n                                localMatch = false;\n                            }\n\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let globalFilterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            globalMatch = FilterUtils[this.filters['global'].matchMode](ObjectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters['global'].value, this.filterLocale);\n\n                            if (globalMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    let matches: boolean;\n                    if (this.filters['global']) {\n                        matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;\n                    }\n                    else {\n                        matches = localFiltered && localMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredValue.push(this.value[i]);\n                    }\n                }\n\n                if (this.filteredValue.length === this.value.length) {\n                    this.filteredValue = null;\n                }\n\n                if (this.paginator) {\n                    this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: this.filteredValue || this.value\n        });\n\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful() && !this.restoringFilter) {\n            this.saveState();\n        }\n\n        if (this.restoringFilter) {\n            this.restoringFilter = false;\n        }\n\n        this.cd.markForCheck();\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = this.defaultSortOrder;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredValue = null;\n        this.filters = {};\n\n        this.first = 0;\n        this.firstChange.emit(this.first);\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    public exportCSV(options?: any) {\n        let data = this.filteredValue || this.value;\n        let csv = '';\n\n        if (options && options.selectionOnly) {\n            data = this.selection || [];\n        }\n\n        //headers\n        for (let i = 0; i < this.columns.length; i++) {\n            let column = this.columns[i];\n            if (column.exportable !== false && column.field) {\n                csv += '\"' + (column.header || column.field) + '\"';\n\n                if (i < (this.columns.length - 1)) {\n                    csv += this.csvSeparator;\n                }\n            }\n        }\n\n        //body\n        data.forEach((record, i) => {\n            csv += '\\n';\n            for (let i = 0; i < this.columns.length; i++) {\n                let column = this.columns[i];\n                if (column.exportable !== false && column.field) {\n                    let cellData = ObjectUtils.resolveFieldData(record, column.field);\n\n                    if (cellData != null) {\n                        if (this.exportFunction) {\n                            cellData = this.exportFunction({\n                                data: cellData,\n                                field: column.field\n                            });\n                        }\n                        else\n                            cellData = String(cellData).replace(/\"/g, '\"\"');\n                    }\n                    else\n                        cellData = '';\n\n\n                    csv += '\"' + cellData + '\"';\n\n                    if (i < (this.columns.length - 1)) {\n                        csv += this.csvSeparator;\n                    }\n                }\n            }\n        });\n\n        let blob = new Blob([csv], {\n            type: 'text/csv;charset=utf-8;'\n        });\n\n        if (window.navigator.msSaveOrOpenBlob) {\n            navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');\n        }\n        else {\n            let link = document.createElement(\"a\");\n            link.style.display = 'none';\n            document.body.appendChild(link);\n            if (link.download !== undefined) {\n                link.setAttribute('href', URL.createObjectURL(blob));\n                link.setAttribute('download', this.exportFilename + '.csv');\n                link.click();\n            }\n            else {\n                csv = 'data:text/csv;charset=utf-8,' + csv;\n                window.open(encodeURI(csv));\n            }\n            document.body.removeChild(link);\n        }\n    }\n\n    public resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({top: 0});\n    }\n\n    public scrollToVirtualIndex(index: number) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n\n    public scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n\n    updateEditingCell(cell, data, field, index) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.editingCellRowIndex = index;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData, originalEvent: event, index: this.editingCellRowIndex });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.editingCellRowIndex = null;\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    initRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        this.editingRowKeys[dataKeyValue] = true;\n    }\n\n    saveRowEdit(rowData: any, rowElement: HTMLTableRowElement) {\n        if (DomHandler.find(rowElement, '.ng-invalid.ng-dirty').length === 0) {\n            let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n            delete this.editingRowKeys[dataKeyValue];\n        }\n    }\n\n    cancelRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        delete this.editingRowKeys[dataKeyValue];\n    }\n\n    toggleRow(rowData: any, event?: Event) {\n        if (!this.dataKey) {\n            throw new Error('dataKey must be defined to use row expansion');\n        }\n\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n\n        if (this.expandedRowKeys[dataKeyValue] != null) {\n            delete this.expandedRowKeys[dataKeyValue];\n            this.onRowCollapse.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n        else {\n            if (this.rowExpandMode === 'single') {\n                this.expandedRowKeys = {};\n            }\n\n            this.expandedRowKeys[dataKeyValue] = true;\n            this.onRowExpand.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    isRowExpanded(rowData: any): boolean {\n        return this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isRowEditing(rowData: any): boolean {\n        return this.editingRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        this.onColumnResize(event);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let minWidth = parseInt(column.style.minWidth || 15);\n\n        if (columnWidth + delta < minWidth) {\n            delta = minWidth - columnWidth;\n        }\n\n        const newColumnWidth = columnWidth + delta;\n\n        if (newColumnWidth >= minWidth) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-datatable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-datatable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (newColumnWidth > minWidth) {\n                    if (this.scrollable) {\n                        this.setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta);\n                    }\n                    else {\n                        this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                        column.style.width = newColumnWidth + 'px';\n                        let containerWidth = this.tableViewChild.nativeElement.style.width;\n                        this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                    }\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    }\n\n    setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta) {\n        let scrollableView = column ? this.findParentScrollableView(column) : this.containerViewChild.nativeElement;\n        let scrollableBody = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-body');\n        let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-header');\n        let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-footer');\n        let scrollableBodyTable = DomHandler.findSingle(scrollableBody, '.p-datatable-scrollable-body table');\n        let scrollableHeaderTable = DomHandler.findSingle(scrollableHeader, 'table.p-datatable-scrollable-header-table');\n        let scrollableFooterTable = DomHandler.findSingle(scrollableFooter, 'table.p-datatable-scrollable-footer-table');\n\n        const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n        const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n        const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n        let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n                container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                table.style.width = width + 'px';\n            }\n        };\n\n        setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n        setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n        setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n        if (column) {\n            let resizeColumnIndex = DomHandler.index(column);\n\n            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        }\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-datatable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n                let dropIndex = DomHandler.indexWithinGroup(dropHeader, 'preorderablecolumn');\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                if ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dropIndex - dragIndex === -1 && this.dropPosition === 1)) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n                }\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n\n                if (this.isStateful()) {\n                    this.zone.runOutsideAngular(() => {\n                        setTimeout(() => {\n                            this.saveState();\n                        });\n                    });\n                }\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    onRowDragStart(event, index) {\n        this.rowDragging = true;\n        this.draggedRowIndex = index;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onRowDragOver(event, index, rowElement) {\n        if (this.rowDragging && this.draggedRowIndex !== index) {\n            let rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\n            let pageY = event.pageY;\n            let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n            let prevRowElement = rowElement.previousElementSibling;\n\n            if (pageY < rowMidY) {\n                DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n\n                this.droppedRowIndex = index;\n                if (prevRowElement)\n                    DomHandler.addClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n            }\n            else {\n                if (prevRowElement)\n                    DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n\n                this.droppedRowIndex = index + 1;\n                DomHandler.addClass(rowElement, 'p-datatable-dragpoint-bottom');\n            }\n        }\n    }\n\n    onRowDragLeave(event, rowElement) {\n        let prevRowElement = rowElement.previousElementSibling;\n        if (prevRowElement) {\n            DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n        }\n\n        DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n        DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-top');\n    }\n\n    onRowDragEnd(event) {\n        this.rowDragging = false;\n        this.draggedRowIndex = null;\n        this.droppedRowIndex = null;\n    }\n\n    onRowDrop(event, rowElement) {\n        if (this.droppedRowIndex != null) {\n            let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\n            ObjectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);\n\n            this.onRowReorder.emit({\n                dragIndex: this.draggedRowIndex,\n                dropIndex: dropIndex\n            });\n        }\n        //cleanup\n        this.onRowDragLeave(event, rowElement);\n        this.onRowDragEnd(event);\n    }\n\n    isEmpty() {\n        let data = this.filteredValue||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n\n    getStorage() {\n        switch(this.stateStorage) {\n            case 'local':\n                return window.localStorage;\n\n            case 'session':\n                return window.sessionStorage;\n\n            default:\n                throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n        }\n    }\n\n    isStateful() {\n        return this.stateKey != null;\n    }\n\n    saveState() {\n        const storage = this.getStorage();\n        let state: TableState = {};\n\n        if (this.paginator) {\n            state.first = this.first;\n            state.rows = this.rows;\n        }\n\n        if (this.sortField) {\n            state.sortField = this.sortField;\n            state.sortOrder = this.sortOrder;\n        }\n\n        if (this.multiSortMeta) {\n            state.multiSortMeta = this.multiSortMeta;\n        }\n\n        if (this.hasFilter()) {\n            state.filters = this.filters;\n        }\n\n        if (this.resizableColumns) {\n            this.saveColumnWidths(state);\n        }\n\n        if (this.reorderableColumns) {\n            this.saveColumnOrder(state);\n        }\n\n        if (this.selection) {\n            state.selection = this.selection;\n        }\n\n        if (Object.keys(this.expandedRowKeys).length) {\n            state.expandedRowKeys = this.expandedRowKeys;\n        }\n\n        if (Object.keys(state).length) {\n            storage.setItem(this.stateKey, JSON.stringify(state));\n        }\n\n        this.onStateSave.emit(state);\n    }\n\n    clearState() {\n        const storage = this.getStorage();\n\n        if (this.stateKey) {\n            storage.removeItem(this.stateKey);\n        }\n    }\n\n    restoreState() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n\n        if (stateString) {\n            let state: TableState = JSON.parse(stateString);\n\n            if (this.paginator) {\n                this.first = state.first;\n                this.rows = state.rows;\n                this.firstChange.emit(this.first);\n                this.rowsChange.emit(this.rows);\n            }\n\n            if (state.sortField) {\n                this.restoringSort = true;\n                this._sortField = state.sortField;\n                this._sortOrder = state.sortOrder;\n            }\n\n            if (state.multiSortMeta) {\n                this.restoringSort = true;\n                this._multiSortMeta = state.multiSortMeta;\n            }\n\n            if (state.filters) {\n                this.restoringFilter = true;\n                this.filters = state.filters;\n            }\n\n            if (this.resizableColumns) {\n                this.columnWidthsState = state.columnWidths;\n                this.tableWidthState = state.tableWidth;\n            }\n\n            if (state.expandedRowKeys) {\n                this.expandedRowKeys = state.expandedRowKeys;\n            }\n\n            if (state.selection) {\n                Promise.resolve(null).then(() => this.selectionChange.emit(state.selection));\n            }\n\n            this.stateRestored = true;\n\n            this.onStateRestore.emit(state);\n        }\n    }\n\n    saveColumnWidths(state) {\n        let widths = [];\n        let headers = DomHandler.find(this.containerViewChild.nativeElement, '.p-datatable-thead > tr:first-child > th');\n        headers.map(header => widths.push(DomHandler.getOuterWidth(header)));\n        state.columnWidths = widths.join(',');\n\n        if (this.columnResizeMode === 'expand') {\n            state.tableWidth = this.scrollable ? DomHandler.findSingle(this.containerViewChild.nativeElement, '.p-datatable-scrollable-header-table').style.width :\n                                                DomHandler.getOuterWidth(this.tableViewChild.nativeElement) + 'px';\n        }\n    }\n\n    restoreColumnWidths() {\n        if (this.columnWidthsState) {\n            let widths = this.columnWidthsState.split(',');\n\n            if (this.columnResizeMode === 'expand' && this.tableWidthState) {\n                if (this.scrollable) {\n                    this.setScrollableItemsWidthOnExpandResize(null, this.tableWidthState, 0);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableWidthState;\n                    this.containerViewChild.nativeElement.style.width = this.tableWidthState;\n                }\n            }\n\n            if (this.scrollable) {\n                let headerCols = DomHandler.find(this.containerViewChild.nativeElement, '.p-datatable-scrollable-header-table > colgroup > col');\n                let bodyCols = DomHandler.find(this.containerViewChild.nativeElement, '.p-datatable-scrollable-body table > colgroup > col');\n\n                headerCols.map((col, index) => col.style.width = widths[index] + 'px');\n                bodyCols.map((col, index) => col.style.width = widths[index] + 'px');\n            }\n            else {\n                let headers = DomHandler.find(this.tableViewChild.nativeElement, '.p-datatable-thead > tr:first-child > th');\n                headers.map((header, index) => header.style.width = widths[index] + 'px');\n            }\n        }\n    }\n\n    saveColumnOrder(state) {\n        if (this.columns) {\n            let columnOrder: string[] = [];\n            this.columns.map(column => {\n                columnOrder.push(column.field||column.key)\n            });\n\n            state.columnOrder = columnOrder;\n        }\n    }\n\n    restoreColumnOrder() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n        if (stateString) {\n            let state: TableState = JSON.parse(stateString);\n            let columnOrder = state.columnOrder;\n            if (columnOrder) {\n                let reorderedColumns = [];\n                columnOrder.map(key => reorderedColumns.push(this.findColumnByKey(key)));\n                this.columnOrderStateRestored = true;\n                this.columns = reorderedColumns;\n            }\n        }\n    }\n\n    findColumnByKey(key) {\n        if (this.columns) {\n            for (let col of this.columns) {\n                if (col.key === key || col.field === key)\n                    return col;\n                else\n                    continue;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n}\n\n@Component({\n    selector: '[pTableBody]',\n    template: `\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && !dt.virtualScroll\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && dt.virtualScroll\">\n            <ng-template cdkVirtualFor let-rowData let-rowIndex=\"index\" [cdkVirtualForOf]=\"dt.value\" [cdkVirtualForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"rowData ? template: dt.loadingBodyTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.expandedRowTemplate\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, expanded: dt.isRowExpanded(rowData), editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\n                    <ng-container *ngTemplateOutlet=\"dt.expandedRowTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.loadingBodyTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"dt.isEmpty() && !dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TableBody {\n\n    @Input(\"pTableBody\") columns: any[];\n\n    @Input(\"pTableBodyTemplate\") template: TemplateRef<any>;\n\n    @Input() frozen: boolean;\n\n    constructor(public dt: Table) {}\n}\n\n@Component({\n    selector: '[pScrollableView]',\n    template: `\n        <div #scrollHeader class=\"p-datatable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-datatable-scrollable-header-box\">\n                <table class=\"p-datatable-scrollable-header-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-datatable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-datatable-tbody\">\n                        <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"dt.frozenValue\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                            <ng-container *ngTemplateOutlet=\"dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}\"></ng-container>\n                        </ng-template>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!dt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-datatable-scrollable-body\" [ngStyle]=\"{'max-height': dt.scrollHeight !== 'flex' ? scrollHeight : undefined}\">\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-datatable-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"dt.virtualRowHeight\" [style.height]=\"dt.scrollHeight !== 'flex' ? scrollHeight : undefined\" \n                    [minBufferPx]=\"dt.minBufferPx\" [maxBufferPx]=\"dt.maxBufferPx\" (scrolledIndexChange)=\"onScrollIndexChange($event)\" class=\"p-datatable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-datatable-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter class=\"p-datatable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-datatable-scrollable-footer-box\">\n                <table class=\"p-datatable-scrollable-footer-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-datatable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrollableView implements AfterViewInit,OnDestroy,AfterViewChecked {\n\n    @Input(\"pScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\n\n    headerScrollListener: any;\n\n    bodyScrollListener: any;\n\n    footerScrollListener: any;\n\n    frozenSiblingBody: HTMLDivElement;\n\n    subscription: Subscription;\n\n    initialized: boolean;\n\n    preventBodyScrollPropagation: boolean;\n\n    loadedPages: number[] = [];\n\n    _scrollHeight: string;\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\n        }\n    }\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {\n        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n                }, 50);\n            });\n        });\n\n        this.initialized = false;\n     }\n\n    ngAfterViewChecked() {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'p-datatable-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.dt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-datatabe-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-datatable-scrollable-body');\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n\n        this.bindEvents();\n        this.alignScrollBar();\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n\n                if (this.dt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n\n    onScrollIndexChange(index: number) {\n        if (this.dt.lazy) {\n            let pageRange = this.createPageRange(Math.floor(index / this.dt.rows));\n            pageRange.forEach(page => this.loadPage(page));\n        }\n    }\n\n    createPageRange(page: number) {\n        let range: number[] = [];\n\n        if (page !== 0) {\n            range.push(page - 1);\n        }\n        range.push(page);\n        if (page !== (this.getPageCount() - 1)) {\n            range.push(page + 1);\n        }\n\n        return range;\n    }\n\n    loadPage(page: number) {\n        if (!this.loadedPages.includes(page)) {\n            this.dt.onLazyLoad.emit({\n                first: this.dt.rows * page, \n                rows: this.dt.rows,\n                sortField: this.dt.sortField,\n                sortOrder: this.dt.sortOrder,\n                filters: this.dt.filters,\n                globalFilter: this.dt.filters && this.dt.filters['global'] ? this.dt.filters['global'].value : null,\n                multiSortMeta: this.dt.multiSortMeta\n            });\n            this.loadedPages.push(page);\n        }\n    }\n\n    clearCache() {\n        this.loadedPages = [];\n    }\n\n    getPageCount() {\n        let dataToRender = this.dt.filteredValue || this.dt.value;\n        let dataLength = dataToRender ? dataToRender.length: 0;\n        return Math.ceil(dataLength / this.dt.rows);\n    }\n\n    scrollToVirtualIndex(index: number): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n\n    scrollTo(options): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n\n    hasVerticalOverflow() {\n        if (this.dt.virtualScroll)\n            return (this.virtualScrollBody.getDataLength() * this.dt.virtualRowHeight) > this.virtualScrollBody.getViewportSize();\n        else\n            return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n\n    alignScrollBar() {\n        if (!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n\n        this.initialized = false;\n    }\n}\n\n@Directive({\n    selector: '[pSortableColumn]',\n    host: {\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"',\n        '[attr.aria-sort]': 'sortOrder'\n    }\n})\nexport class SortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"pSortableColumn\") field: string;\n\n    @Input() pSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n\n    sortOrder: string;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.dt.isSorted(this.field);\n        this.sortOrder = this.sorted ? (this.dt.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.dt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.pSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n\n@Component({\n    selector: 'p-sortIcon',\n    template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class SortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public dt: Table, public cd: ChangeDetectorRef) {\n        this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n\n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.dt.sortMode === 'single') {\n            this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;\n        }\n        else if (this.dt.sortMode === 'multiple') {\n            let sortMeta = this.dt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n\n        this.cd.markForCheck();\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[pSelectableRow]',\n    host: {\n        '[class.p-selectable-row]': 'isEnabled()',\n        '[class.p-highlight]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class SelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRow\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowTouchEnd(event);\n        }\n    }\n\n    @HostListener('keydown.arrowdown', ['$event'])\n    onArrowDownKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const row = <HTMLTableRowElement>event.currentTarget;\n        const nextRow = this.findNextSelectableRow(row);\n\n        if (nextRow) {\n            nextRow.focus();\n        }\n\n        event.preventDefault();\n    }\n\n    @HostListener('keydown.arrowup', ['$event'])\n    onArrowUpKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const row = <HTMLTableRowElement>event.currentTarget;\n        const prevRow = this.findPrevSelectableRow(row);\n\n        if (prevRow) {\n            prevRow.focus();\n        }\n\n        event.preventDefault();\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKeyDown(event: KeyboardEvent) {\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        this.dt.handleRowClick({\n            originalEvent: event,\n            rowData: this.data,\n            rowIndex: this.index\n        });\n    }\n\n    findNextSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let nextRow = <HTMLTableRowElement> row.nextElementSibling;\n        if (nextRow) {\n            if (DomHandler.hasClass(nextRow, 'p-datatable-selectable-row'))\n                return nextRow;\n            else\n                return this.findNextSelectableRow(nextRow);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findPrevSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let prevRow = <HTMLTableRowElement> row.previousElementSibling;\n        if (prevRow) {\n            if (DomHandler.hasClass(prevRow, 'p-datatable-selectable-row'))\n                return prevRow;\n            else\n                return this.findPrevSelectableRow(prevRow);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pSelectableRowDblClick]',\n    host: {\n        '[class.p-datatable-selectable-row]': 'isEnabled()',\n        '[class.p-highlight]': 'selected'\n    }\n})\nexport class SelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRowDblClick\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pContextMenuRow]',\n    host: {\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class ContextMenuRow {\n\n    @Input(\"pContextMenuRow\") data: any;\n\n    @Input(\"pContextMenuRowIndex\") index: number;\n\n    @Input() pContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.contextMenuSource$.subscribe((data) => {\n                this.selected = this.dt.equals(this.data, data);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowRightClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n\n            this.el.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pRowToggler]'\n})\nexport class RowToggler {\n\n    @Input('pRowToggler') data: any;\n\n    @Input() pRowTogglerDisabled: boolean;\n\n    constructor(public dt: Table) { }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.toggleRow(this.data, event);\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pRowTogglerDisabled !== true;\n    }\n}\n\n@Directive({\n    selector: '[pResizableColumn]'\n})\nexport class ResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'p-column-resizer';\n            this.el.nativeElement.appendChild(this.resizer);\n\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: MouseEvent) {\n        if (event.which === 1) {\n            this.dt.onColumnResizeBegin(event);\n            this.bindDocumentEvents();\n        }\n    }\n\n    onDocumentMouseMove(event: MouseEvent) {\n        this.dt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: MouseEvent) {\n        this.dt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.pResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n\n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[pReorderableColumn]'\n})\nexport class ReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.dt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.dt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.dt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.dt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.pReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableColumn]'\n})\nexport class EditableColumn implements AfterViewInit {\n\n    @Input(\"pEditableColumn\") data: any;\n\n    @Input(\"pEditableColumnField\") field: any;\n\n    @Input(\"pEditableColumnRowIndex\") rowIndex: number;\n\n    @Input() pEditableColumnDisabled: boolean;\n\n    @Input() pFocusCellSelector: string;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.dt.editingCellClick = true;\n\n            if (this.dt.editingCell) {\n                if (this.dt.editingCell !== this.el.nativeElement) {\n                    if (!this.dt.isEditingCellValid()) {\n                        return;\n                    }\n\n                    this.closeEditingCell(true, event);\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field, this.rowIndex);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.dt.onEditInit.emit({field: this.field, data: this.data, index: this.rowIndex});\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusCellSelector = this.pFocusCellSelector || 'input, textarea, select';\n                let focusableElement = DomHandler.findSingle(this.el.nativeElement, focusCellSelector);\n\n                if (focusableElement) {\n                    focusableElement.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell(completed, event) {\n        if (completed)\n            this.dt.onEditComplete.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.rowIndex});\n        else\n            this.dt.onEditCancel.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.rowIndex});\n\n        DomHandler.removeClass(this.dt.editingCell, 'p-cell-editing');\n        this.dt.editingCell = null;\n        this.dt.editingCellData = null;\n        this.dt.editingCellField = null;\n        this.dt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (this.dt.isEditingCellValid()) {\n                this.closeEditingCell(true, event);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.escape', ['$event'])\n    onEscapeKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (this.dt.isEditingCellValid()) {\n                this.closeEditingCell(false, event);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.meta.tab', ['$event'])\n    onShiftKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            if (event.shiftKey)\n                this.moveToPreviousCell(event);\n            else{\n                this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        if (currentCell) {\n            let targetCell = this.findPreviousEditableColumn(currentCell);\n\n            if (targetCell) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell(true, event);\n                }\n\n                DomHandler.invokeElementMethod(event.target, 'blur');\n                DomHandler.invokeElementMethod(targetCell, 'click');\n                event.preventDefault();\n            }\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        if (currentCell) {\n            let targetCell = this.findNextEditableColumn(currentCell);\n\n            if (targetCell) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell(true, event);\n                }\n\n                DomHandler.invokeElementMethod(event.target, 'blur');\n                DomHandler.invokeElementMethod(targetCell, 'click');\n                event.preventDefault();\n            }\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement.previousElementSibling;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement.nextElementSibling;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.pEditableColumnDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableRow]'\n})\nexport class EditableRow {\n\n    @Input(\"pEditableRow\") data: any;\n\n    @Input() pEditableRowDisabled: boolean;\n\n    constructor(public el: ElementRef) {}\n\n    isEnabled() {\n        return this.pEditableRowDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pInitEditableRow]'\n})\nexport class InitEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.initRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n\n}\n\n@Directive({\n    selector: '[pSaveEditableRow]'\n})\nexport class SaveEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.saveRowEdit(this.editableRow.data, this.editableRow.el.nativeElement);\n        event.preventDefault();\n    }\n}\n\n@Directive({\n    selector: '[pCancelEditableRow]'\n})\nexport class CancelEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.cancelRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n}\n\n@Component({\n    selector: 'p-cellEditor',\n    template: `\n        <ng-container *ngIf=\"editing\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!editing\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class CellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public dt: Table, @Optional() public editableColumn: EditableColumn, @Optional() public editableRow: EditableRow) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n\n    get editing(): boolean {\n        return (this.dt.editingCell && this.editableColumn && this.dt.editingCell === this.editableColumn.el.nativeElement) ||\n                (this.editableRow && this.dt.editMode === 'row' && this.dt.isRowEditing(this.editableRow.data));\n    }\n\n}\n\n@Component({\n    selector: 'p-tableRadioButton',\n    template: `\n        <div class=\"p-radiobutton p-component\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'p-radiobutton-box p-component':true,\n                'p-highlight':checked, 'p-disabled':disabled}\" role=\"radio\" [attr.aria-checked]=\"checked\">\n                <div class=\"p-radiobutton-icon\"></div>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TableRadioButton  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabel: string;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithRadio({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-tableCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"disabled\"\n                [attr.required]=\"required\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box p-component':true,\n                'p-highlight':checked, 'p-disabled':disabled}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TableCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() ariaLabel: string;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithCheckbox({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-tableHeaderCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [disabled]=\"isDisabled()\" [attr.aria-label]=\"ariaLabel\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled': isDisabled()}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TableHeaderCheckbox  {\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    @Input() disabled: boolean;\n\n    @Input() inputId: string;\n\n    @Input() name: string;\n\n    @Input() ariaLabel: string;\n\n    checked: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\n        this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            if (this.dt.value && this.dt.value.length > 0) {\n                this.dt.toggleRowsWithCheckbox(event, !this.checked);\n            }\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    isDisabled() {\n        return this.disabled || !this.dt.value || !this.dt.value.length;\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        this.cd.markForCheck();\n\n        if (this.dt.filteredValue) {\n            const val = this.dt.filteredValue;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.isAllFilteredValuesChecked());\n        }\n        else {\n            const val = this.dt.value;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.dt.selection.length === val.length);\n        }\n    }\n\n    isAllFilteredValuesChecked() {\n        if (!this.dt.filteredValue) {\n            return false;\n        }\n        else {\n            for (let rowData of this.dt.filteredValue) {\n                if (!this.dt.isSelected(rowData)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pReorderableRowHandle]'\n})\nexport class ReorderableRowHandle implements AfterViewInit {\n\n    @Input(\"pReorderableRowHandle\") index: number;\n\n    constructor(public el: ElementRef) {}\n\n    ngAfterViewInit() {\n        DomHandler.addClass(this.el.nativeElement, 'p-datatable-reorderablerow-handle');\n    }\n}\n\n@Directive({\n    selector: '[pReorderableRow]'\n})\nexport class ReorderableRow implements AfterViewInit {\n\n    @Input(\"pReorderableRow\") index: number;\n\n    @Input() pReorderableRowDisabled: boolean;\n\n    mouseDownListener: any;\n\n    dragStartListener: any;\n\n    dragEndListener: any;\n\n    dragOverListener: any;\n\n    dragLeaveListener: any;\n\n    dropListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.el.nativeElement.droppable = true;\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragEndListener = this.onDragEnd.bind(this);\n            this.el.nativeElement.addEventListener('dragend', this.dragEndListener);\n\n            this.dragOverListener = this.onDragOver.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragStartListener) {\n            document.removeEventListener('dragstart', this.dragStartListener);\n            this.dragStartListener = null;\n        }\n\n        if (this.dragEndListener) {\n            document.removeEventListener('dragend', this.dragEndListener);\n            this.dragEndListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (DomHandler.hasClass(event.target, 'p-datatable-reorderablerow-handle'))\n            this.el.nativeElement.draggable = true;\n        else\n            this.el.nativeElement.draggable = false;\n    }\n\n    onDragStart(event) {\n        this.dt.onRowDragStart(event, this.index);\n    }\n\n    onDragEnd(event) {\n        this.dt.onRowDragEnd(event);\n        this.el.nativeElement.draggable = false;\n    }\n\n    onDragOver(event) {\n        this.dt.onRowDragOver(event, this.index, this.el.nativeElement);\n        event.preventDefault();\n    }\n\n    onDragLeave(event) {\n        this.dt.onRowDragLeave(event, this.el.nativeElement);\n    }\n\n    isEnabled() {\n        return this.pReorderableRowDisabled !== true;\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled() && this.dt.rowDragging) {\n            this.dt.onRowDrop(event, this.el.nativeElement);\n        }\n\n        event.preventDefault()\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule,ScrollingModule],\n    exports: [Table,SharedModule,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow,ScrollingModule],\n    declarations: [Table,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,TableBody,ScrollableView,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow]\n})\nexport class TableModule { }\n"]}